<Type Name="SQLStore" FullName="SemWeb.Stores.SQLStore">
  <TypeSignature Language="C#" Value="public abstract class SQLStore : SemWeb.Store, SemWeb.Entity+LazyUriLoader" />
  <AssemblyInfo>
    <AssemblyName>SemWeb</AssemblyName>
    <AssemblyVersion>0.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SemWeb.Store</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>SemWeb.Entity+LazyUriLoader</InterfaceName>
    </Interface>
  </Interfaces>
  <Members>
    
    <Member MemberName="RunCommand">
      <MemberSignature Language="C#" Value="protected abstract void RunCommand (string sql);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sql">The SQL statement to execute.</param>
        <summary>Executes an SQL statement without a return value.</summary>
        <remarks>Inheritors must implemented this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunScalar">
      <MemberSignature Language="C#" Value="protected abstract object RunScalar (string sql);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sql">The SQL statement to run that returns a number of text value.</param>
        <summary>Executes an SQL statement that returns a scalar value.</summary>
        <returns>The numeric or text value.</returns>
        <remarks>Inheritors must implement this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunReader">
      <MemberSignature Language="C#" Value="protected abstract System.Data.IDataReader RunReader (string sql);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.IDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sql">The SQL statement to run.</param>
        <summary>Executes an SQL statement that returns a table.</summary>
        <returns>An IDataReader containing the result of the tabular query.</returns>
        <remarks>Inheritors must implement this method.</remarks>
      </Docs>
    </Member>
    
    
    <Member MemberName="CreateTable">
      <MemberSignature Language="C#" Value="protected virtual void CreateTable ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the tables needed by the SQLStore.</summary>
        <remarks>Inheritors may override this method to change the way tables are created by the SQLStore.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIndexes">
      <MemberSignature Language="C#" Value="protected virtual void CreateIndexes ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the indexes on the tables.</summary>
        <remarks>Inheritors may override this method to change the way indexes are created on the tables used by the SQLStore.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="protected virtual void BeginTransaction ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called at the start of <see cref="M:SemWeb.Store.Import(SemWeb.RdfReader)" />.</summary>
        <remarks>Inheritors may override this method to put a lock on the tables or begin a transaction to speed up the process of adding many statements into the tables.  The default implementation does nothing.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTransaction">
      <MemberSignature Language="C#" Value="protected virtual void EndTransaction ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called at the end of <see cref="M:SemWeb.Store.Import(SemWeb.RdfReader)" />.</summary>
        <remarks>Inheritors may override this method to end a lock or transaction started in <see cref="M:SemWeb.Stores.SQLStore.BeginTransaction()" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="protected string TableName { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the table prefix passed to the constructor.</summary>
        <value>The table prefix passed to the constructor.</value>
        <remarks>This property is protected and read-only.</remarks>
      </Docs>
    </Member>
  <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SQLStore (string table);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="table" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table">The prefix name of the tables used by this store.</param>
        <summary>The protected constructor used by inherited classes.</summary>
        <remarks>The two tables used by this store will be <paramref name="table" />_statements and <paramref name="table" />_literals.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>A store that holds statements in an SQL database.</summary>
    <remarks>
      <para>This class is abstract and is inherited by classes for particular database backends.  Backends are provided for MySQL and SQLite in separate assemblies.  Rather than referencing those assemblies and using their constructors to create stores for those databases, it is easier to use <see cref="M:SemWeb.Store.CreateForInput(string)" /> or <see cref="M:SemWeb.Store.CreateForOutput(string)" />.  Both methods return SQLStores that can be used for both reading and writing.</para>

<para>The SQLStore stores statements in two tables, one containing the statement triples (actually quadruples with meta information) and the other containing string data including entity URIs and typed literal values.  The CREATE statements for the tables, which are automatically executed by the SQLStore when needed, are:</para>


<example>
  <code lang="SQL">
CREATE TABLE TABLEPREFIX_statements (subject int UNSIGNED NOT NULL,
       predicate int UNSIGNED NOT NULL, objecttype int NOT NULL, object int UNSIGNED NOT NULL,
       meta int UNSIGNED NOT NULL);

CREATE TABLE TABLEPREFIX_literals (id INT NOT NULL, value BLOB NOT NULL,
      language TEXT, datatype TEXT, PRIMARY KEY(id));
  </code>
</example>

<para>Indexes are created on the subject, predicate, and object/objecttype columns in the statements table, and on the value column in the literals table.</para>

<para>Each entity stored in the tables is given an ID starting at 1 which is used as the value of the subject, predicate, object, and meta columns when the entity appears in a statement.  When the object of a statement is an entity, objecttype is 0 and object contains the ID of the entity.  When the object of a statement is a literal, objecttype is 1 and the object column contains the value of the id column in the literals table for the literal value.  Literals in the literals table can be referenced by more than one statement.  Lastly, entity URIs are stored in the statements table by setting the predicate column to 0 and referencing the URI of the entity, put in the literals table, with objecttype=1 and object set to the id of the URI in the literals table.</para>

<para>Anonymous entities (blank nodes) are simply those entities mentioned in the statements table that have no entry giving their URI.</para>

<block subset="none" type="note">
  <para>
     While it is safe to use many SQLStores to read from the same store, it is not safe to use multiple SQLStores to write to the same store concurrently.
  </para>
</block>

<para>Inheritors must implement <see cref="M:SemWeb.Stores.SQLStore.RunCommand(string)" />, <see cref="M:SemWeb.Stores.SQLStore.RunReader(string)" />, and <see cref="M:SemWeb.Stores.SQLStore.RunScalar(string)" />.</para></remarks>
  </Docs>
</Type>
