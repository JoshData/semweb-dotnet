<Type Name="SQLStore" FullName="SemWeb.Stores.SQLStore">
  <TypeSignature Language="C#" Value="public abstract class SQLStore : SemWeb.Store" />
  <AssemblyInfo>
    <AssemblyName>SemWeb</AssemblyName>
    <AssemblyVersion>0.5.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SemWeb.Store</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Members>
    
    <Member MemberName="RunCommand">
      <MemberSignature Language="C#" Value="protected abstract void RunCommand (string sql);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sql">The SQL statement to execute.</param>
        <summary>Executes an SQL statement without a return value.</summary>
        <remarks>Inheritors must implemented this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunScalar">
      <MemberSignature Language="C#" Value="protected abstract object RunScalar (string sql);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sql">The SQL statement to run that returns a number of text value.</param>
        <summary>Executes an SQL statement that returns a scalar value.</summary>
        <returns>The numeric or text value.</returns>
        <remarks>Inheritors must implement this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunReader">
      <MemberSignature Language="C#" Value="protected abstract System.Data.IDataReader RunReader (string sql);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Data.IDataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sql" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sql">The SQL statement to run.</param>
        <summary>Executes an SQL statement that returns a table.</summary>
        <returns>An IDataReader containing the result of the tabular query.</returns>
        <remarks>Inheritors must implement this method.</remarks>
      </Docs>
    </Member>
    
    
    <Member MemberName="CreateTable">
      <MemberSignature Language="C#" Value="protected virtual void CreateTable ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the tables needed by the SQLStore.</summary>
        <remarks>Inheritors may override this method to change the way tables are created by the SQLStore.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIndexes">
      <MemberSignature Language="C#" Value="protected virtual void CreateIndexes ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates the indexes on the tables.</summary>
        <remarks>Inheritors may override this method to change the way indexes are created on the tables used by the SQLStore.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="protected virtual void BeginTransaction ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called at the start of <see cref="M:SemWeb.Store.Import(SemWeb.RdfReader)" />.</summary>
        <remarks>Inheritors may override this method to put a lock on the tables or begin a transaction to speed up the process of adding many statements into the tables.  The default implementation does nothing.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTransaction">
      <MemberSignature Language="C#" Value="protected virtual void EndTransaction ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called at the end of <see cref="M:SemWeb.Store.Import(SemWeb.RdfReader)" />.</summary>
        <remarks>Inheritors may override this method to end a lock or transaction started in <see cref="M:SemWeb.Stores.SQLStore.BeginTransaction()" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="protected string TableName { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the table prefix passed to the constructor.</summary>
        <value>The table prefix passed to the constructor.</value>
        <remarks>This property is protected and read-only.</remarks>
      </Docs>
    </Member>
  <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SQLStore (string table);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="table" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="table">The prefix name of the tables used by this store.</param>
        <summary>The protected constructor used by inherited classes.</summary>
        <remarks>The two tables used by this store will be <paramref name="table" />_statements and <paramref name="table" />_literals.</remarks>
      </Docs>
    </Member>
  <Member MemberName="CreateNullTest">
      <MemberSignature Language="C#" Value="protected abstract string CreateNullTest (string column);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="column">The column on which the test should be performed.</param>
        <summary>Implemented by inheritors to construct a test to see whether a column has a null value.</summary>
        <returns>A SQL test if the column in null.</returns>
        <remarks>
          <para>For example, the MySQL store returns:  ISNULL(<paramref name="column" />).  The SQLite store returns:  <paramref name="column" /> ISNULL.</para>
        </remarks>
      </Docs>
    </Member>
  <Member MemberName="EscapedAppend">
      <MemberSignature Language="C#" Value="protected virtual void EscapedAppend (System.Text.StringBuilder b, string str);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="System.Text.StringBuilder" />
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="b">To be added.</param>
        <param name="str">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  <Member MemberName="SupportsInsertCombined">
      <MemberSignature Language="C#" Value="protected abstract bool SupportsInsertCombined { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Implemented by inheritors to indicate whether the backend supports inserting mutliple rows at once in a single INSERT command.</summary>
        <value>If true, the more efficient multiple-row INSERT syntax is used, e.g.: INSERT INTO table VALUES (row1a, row1b), (row2a, row2b), .... ;</value>
        <remarks>None.</remarks>
      </Docs>
    </Member>
  <Member MemberName="SupportsUseIndex">
      <MemberSignature Language="C#" Value="protected abstract bool SupportsUseIndex { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>A store that holds statements in an SQL database.</summary>
    <remarks>
      <para>This class is abstract and is inherited by classes for particular database backends.  Backends are provided for MySQL and SQLite in separate assemblies.  Rather than referencing those assemblies and using their constructors to create stores for those databases, it is easier to use <see cref="M:SemWeb.Store.CreateForInput(string)" /> or <see cref="M:SemWeb.Store.CreateForOutput(string)" />.  Both methods return SQLStores that can be used for both reading and writing.</para>

<para>The SQLStore uses three tables, one containing the statement triples (actually quadruples with meta information) using numeric identifiers for each resource, one mapping entity identifiers to URIs, and the last mapping literal identifiers to string/language/datatype triples.  The CREATE statements for the tables, which are automatically executed by the SQLStore when needed, are:</para>


<example>
  <code lang="SQL">
CREATE TABLE TABLEPREFIX_statements (subject int UNSIGNED NOT NULL,
       predicate int UNSIGNED NOT NULL, objecttype int NOT NULL, object int UNSIGNED NOT NULL,
       meta int UNSIGNED NOT NULL);

CREATE TABLE TABLEPREFIX_entities (id INT NOT NULL, value BLOB NOT NULL,
      PRIMARY KEY(id));

CREATE TABLE TABLEPREFIX_literals (id INT NOT NULL, value BLOB NOT NULL,
      language TEXT, datatype TEXT, PRIMARY KEY(id));
</code>
</example>

<para>Indexes are created on the subject, predicate, and object/objecttype columns in the statements table, and on the value columns in the entities and literals table.  Because MySQL before version 4.1.2 supported text indexes of length up to 255 bytes, URIs in the SQLStore are limited to this length.</para>

<para>Each resource stored in the tables is given an ID starting at 1 which is used as the value of the subject, predicate, object, and meta columns when the entity appears in a statement.  The value 0 is used for statements with no meta information.  When the object of a statement is an entity, objecttype is 0 and object contains the ID of the entity.  When the object of a statement is a literal, objecttype is 1 and the object column contains the value of the id column in the literals table for the literal value.  Literals in the literals table can be referenced by more than one statement.</para>

<para>Anonymous entities (blank nodes) are simply those entities mentioned in the statements table that have no entry giving their URI in the entities table.</para>

<block subset="none" type="note">
  <para>
     While it is safe to use many SQLStores to read from the same store, it is not safe to use multiple SQLStores to write to the same store concurrently.
  </para>
</block>

<para>Inheritors must implement <see cref="M:SemWeb.Stores.SQLStore.RunCommand(string)" />, <see cref="M:SemWeb.Stores.SQLStore.RunReader(string)" />, and <see cref="M:SemWeb.Stores.SQLStore.RunScalar(string)" />.</para></remarks>
  </Docs>
</Type>
