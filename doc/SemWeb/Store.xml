<Type Name="Store" FullName="SemWeb.Store">
  <TypeSignature Language="C#" Value="public abstract class Store : SemWeb.StatementSinkEx" />
  <AssemblyInfo>
    <AssemblyName>SemWeb</AssemblyName>
    <AssemblyVersion>1.0.1954.18463</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>SemWeb.StatementSinkEx</InterfaceName>
    </Interface>
  </Interfaces>
  <Members>
    
    
    
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public abstract void Clear ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the contents of the store.</summary>
        <remarks>The store is empty after a call to Clear.</remarks>
      </Docs>
    </Member>
    
    
    
    
    <Member MemberName="GetEntitiesOfType">
      <MemberSignature Language="C#" Value="public SemWeb.Entity[] GetEntitiesOfType (SemWeb.Entity type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Entity[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="SemWeb.Entity" />
      </Parameters>
      <Docs>
        <param name="type">The type of entities to return.</param>
        <summary>Returns an array of all entities in the store whose type is known to be the given type.</summary>
        <returns>An array of all entities in the store whose type is known to be the given type.</returns>
        <remarks>Types are indicated using the rdf:type predicate.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public abstract void Add (SemWeb.Statement statement);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="SemWeb.Statement" />
      </Parameters>
      <Docs>
        <param name="statement">The statement to add.</param>
        <summary>Adds a statement to the store.</summary>
        <remarks>The Subject, Predicate, and Object fields of the statement must not be <see langword="null" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public abstract void Remove (SemWeb.Statement statement);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="SemWeb.Statement" />
      </Parameters>
      <Docs>
        <param name="statement">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (SemWeb.Store other);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="SemWeb.Store" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public virtual void Import (SemWeb.RdfParser parser);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parser" Type="SemWeb.RdfParser" />
      </Parameters>
      <Docs>
        <param name="parser">The parser whose statements will be added into the store.</param>
        <summary>Loads the contents of a parser into the store.</summary>
        <remarks>This method wraps a call to <see cref="M:SemWeb.RdfParser.Parse(SemWeb.Store)" /> in store-specific code that prepares the store for receiving many statements.  The store may make itself locked for access by other processes to make the parsing faster.  To avoid this, call <see cref="M:SemWeb.RdfParser.Parse(SemWeb.Store)" /> directly.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (SemWeb.Statement statement);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="SemWeb.Statement" />
      </Parameters>
      <Docs>
        <param name="statement">The statement to search for.</param>
        <summary>Returns whether the store contains a statement.</summary>
        <returns><see langword="true" /> if the store contains the statement.</returns>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select (SemWeb.Statement template, SemWeb.StatementSink result);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="template" Type="SemWeb.Statement" />
        <Parameter Name="result" Type="SemWeb.StatementSink" />
      </Parameters>
      <Docs>
        <param name="template">To be added.</param>
        <param name="result">To be added.</param>
        <summary>Queries the story for all matching statements, and writes the statements to a <see cref="T:SemWeb.StatementSink" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select (SemWeb.Statement[] templates, SemWeb.StatementSink result);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templates" Type="SemWeb.Statement[]" />
        <Parameter Name="result" Type="SemWeb.StatementSink" />
      </Parameters>
      <Docs>
        <param name="templates">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    
    <Member MemberName="SelectObjects">
      <MemberSignature Language="C#" Value="public SemWeb.Resource[] SelectObjects (SemWeb.Entity subject, SemWeb.Entity predicate);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Resource[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subject" Type="SemWeb.Entity" />
        <Parameter Name="predicate" Type="SemWeb.Entity" />
      </Parameters>
      <Docs>
        <param name="subject">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectSubjects">
      <MemberSignature Language="C#" Value="public SemWeb.Entity[] SelectSubjects (SemWeb.Entity predicate, SemWeb.Entity object);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Entity[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="SemWeb.Entity" />
        <Parameter Name="object" Type="SemWeb.Entity" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <param name="object">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (SemWeb.RdfWriter writer);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="SemWeb.RdfWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    
    
    
    <Member MemberName="StatementCount">
      <MemberSignature Language="C#" Value="public abstract int StatementCount { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of statements in the store.</summary>
        <value>The number of statements in the store.</value>
        <remarks>None.</remarks>
      </Docs>
    </Member>
  <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.TextWriter writer);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  
  <Member MemberName="GetAllEntities">
      <MemberSignature Language="C#" Value="public abstract SemWeb.Entity[] GetAllEntities ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Entity[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of all entities mentioned in the store.</summary>
        <returns>An array of all entities mentioned in the store.</returns>
        <remarks>None.</remarks>
      </Docs>
    </Member>
  <Member MemberName="GetAllPredicates">
      <MemberSignature Language="C#" Value="public abstract SemWeb.Entity[] GetAllPredicates ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Entity[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of all predicates mentioned in the store.</summary>
        <returns>An array of all predicates mentioned in the store.</returns>
        <remarks>None.</remarks>
      </Docs>
    </Member>
  <Member MemberName="GetResourceKey">
      <MemberSignature Language="C#" Value="protected object GetResourceKey (SemWeb.Resource resource);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="SemWeb.Resource" />
      </Parameters>
      <Docs>
        <param name="resource">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  <Member MemberName="SetResourceKey">
      <MemberSignature Language="C#" Value="protected void SetResourceKey (SemWeb.Resource resource, object value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="SemWeb.Resource" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resource">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public abstract void Select (SemWeb.Statement template, SemWeb.SelectPartialFilter partialFilter, SemWeb.StatementSink result);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="template" Type="SemWeb.Statement" />
        <Parameter Name="partialFilter" Type="SemWeb.SelectPartialFilter" />
        <Parameter Name="result" Type="SemWeb.StatementSink" />
      </Parameters>
      <Docs>
        <param name="template">To be added.</param>
        <param name="partialFilter">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public abstract void Select (SemWeb.Statement[] templates, SemWeb.SelectPartialFilter partialFilter, SemWeb.StatementSink result);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templates" Type="SemWeb.Statement[]" />
        <Parameter Name="partialFilter" Type="SemWeb.SelectPartialFilter" />
        <Parameter Name="result" Type="SemWeb.StatementSink" />
      </Parameters>
      <Docs>
        <param name="templates">To be added.</param>
        <param name="partialFilter">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  
  <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public abstract void Replace (SemWeb.Entity a, SemWeb.Entity b);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="SemWeb.Entity" />
        <Parameter Name="b" Type="SemWeb.Entity" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Store ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>The constructor used by inherited classes.</summary>
        <remarks>None.</remarks>
      </Docs>
    </Member>
  <Member MemberName="CreateForInput">
      <MemberSignature Language="C#" Value="public static SemWeb.Store CreateForInput (string spec);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Store</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spec" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="spec">A specifier string, whose format is given below.</param>
        <summary>Creates a store from which statements will be read.</summary>
        <returns>A store.</returns>
        <remarks><para>The specifier string is in one of the following formats.  When a filename is expected, a dash can be used to indicate standard input.</para>

<list type="table">
  <listheader>
    <term><paramref name="spec" /></term>
    <description>Meaning</description>
  </listheader>
  <item>
    <term>mem</term>
    <description>A new <see cref="T:SemWeb.MemoryStore" />.</description>
  </item>
  <item>
    <term>xml:[filename]</term>
    <description>A <see cref="T:SemWeb.MemoryStore" /> whose contents have been parsed from the RDF/XML file.</description>
  </item>
  <item>
    <term>n3:[filename]</term>
    <description>A <see cref="T:SemWeb.MemoryStore" /> whose contents have been parsed from the N3 file.</description>
  </item>
  <item>
    <term>sqlite:[table]:[connection string]</term>
    <description>A <see cref="T:SemWeb.Stores.SQLStore" /> connected to the SQLite database given in the connection string, using the tables prefixed by the table parameter.</description>
  </item>
  <item>
    <term>mysql:[table]:[connection string]</term>
    <description>A <see cref="T:SemWeb.Stores.SQLStore" /> connected to the MySQL database given in the connection string, using the tables prefixed by the table parameter.</description>
  </item>
</list></remarks>
      </Docs>
    </Member>
  <Member MemberName="CreateForOutput">
      <MemberSignature Language="C#" Value="public static SemWeb.StatementSinkEx CreateForOutput (string spec);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.StatementSinkEx</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spec" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="spec">A specification string whose format is given below.</param>
        <summary>Creates a <see cref="T:SemWeb.StatementSinkEx" /> into which statements will be added.</summary>
        <returns>A StatementSinkEx.</returns>
        <remarks><para>The specifier string is in one of the following formats.  When a filename is expected, a dash can be used to indicate standard output.</para>

<list type="table">
  <listheader>
    <term><paramref name="spec" /></term>
    <description>Meaning</description>
  </listheader>
  <item>
    <term>mem</term>
    <description>A new <see cref="T:SemWeb.MemoryStore" />.</description>
  </item>
  <item>
    <term>xml:[filename]</term>
    <description>A <see cref="T:SemWeb.IO.RdfXmlWriter" /> opened on the given file.</description>
  </item>
  <item>
    <term>n3:[filename]</term>
    <description>A <see cref="T:SemWeb.IO.N3Writer" /> opened on the given file.</description>
  </item>
  <item>
    <term>sql:[table]</term>
    <description>A <see cref="T:SemWeb.IO.SQLWriter" /> writing to standard output, using the given table prefix.  SQL writers write SQL statements which can be loaded into a database that can be used by the <see cref="T:SemWeb.Stores.SQLStore" />.</description>
  </item>
  <item>
    <term>sqlite:[table]:[connection string]</term>
    <description>A <see cref="T:SemWeb.Stores.SQLStore" /> connected to the SQLite database given in the connection string, using the tables prefixed by the table parameter.</description>
  </item>
  <item>
    <term>mysql:[table]:[connection string]</term>
    <description>A <see cref="T:SemWeb.Stores.SQLStore" /> connected to the MySQL database given in the connection string, using the tables prefixed by the table parameter.</description>
  </item>
</list></remarks>
      </Docs>
    </Member>
  <Member MemberName="CreateAnonymousEntity">
      <MemberSignature Language="C#" Value="public abstract SemWeb.Entity CreateAnonymousEntity ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Entity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an anonymous entity in the store.</summary>
        <returns>A new anonymous entity.</returns>
        <remarks>None.</remarks>
      </Docs>
    </Member>
  <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public SemWeb.MemoryStore Select (SemWeb.Statement template);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.MemoryStore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="template" Type="SemWeb.Statement" />
      </Parameters>
      <Docs>
        <param name="template">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public SemWeb.MemoryStore Select (SemWeb.Statement template, SemWeb.SelectPartialFilter partialFilter);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.MemoryStore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="template" Type="SemWeb.Statement" />
        <Parameter Name="partialFilter" Type="SemWeb.SelectPartialFilter" />
      </Parameters>
      <Docs>
        <param name="template">To be added.</param>
        <param name="partialFilter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>A repository for <see cref="T:SemWeb.Statement" />s.</summary>
    <remarks>This class is abstract.  The <see cref="T:SemWeb.MemoryStore" /> maintains an in-memory array of statements.</remarks>
  </Docs>
</Type>
