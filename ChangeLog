	* RdfXmlWriter: Another bug fix, this time with typed nodes.
	  Also detects invalid parseType=Literal + datatype.
	* RdfXmlReader: New constructors for taking a BaseURI argument.
	* Literal: New static method FromValue which turns doubles,
	  ints, DateTimes, etc. into XMLSchema-typed Literal objects.
	* SPARQL uses the 0.8 version of Ryan Levering's library.

2006-06-18 Version 0.741

	* RdfXmlWriter: Condense output with parseType=Literal
	  and parseType=Resource where possible.  Fixed a bug
	  with attributes and characters needing escaping, and
	  incorrect condensing with literal attributes.
	* Sparql: UNIONs of UNIONs would thrown an exception.

2006-06-06 Version 0.74

	* SQLStore:
	  - Improvements to the Import() methodology, now letting
	    the store scale much better, and a dynamic adjustment
	    of the statement-buffer size increases performance a lot.
	  - The literals table is now unique-indexed with a new hash column
	    containing a SHA1 hash of the literal value, language, and
	    datatype.  This also puts an upper limit on the amount of
	    bytes needed to be transfered to the SQL server in order
	    to find a literal: just the hash, and not the whole value.
	    Beware: This makes old databases unreadable.
	  - Also, a bug fix related to literals being added to the literals
	    table multiple times.
	* RdfXmlReader: Detect two cases of invalid RDF.  Properly
	  recognize xml:base on MS .NET, since that apparently isn't
	  taken care of by XmlReader.BaseURI.
	* RdfXmlWriter: Better API for writing directly to a XmlDocument.
	  Also, a minor bug fix.
	* RdfWriters: No need to pass your own NamespaceManager.
	* SelectableSource: The FindEntities method is removed in favor
	  of the as-yet-unimplemented QueryableSource interface.

2006-05-11 Version 0.73

	* RdfXmlWriter: Provide a way to access the generated
	  XmlDocument directly, ensure it uses empty elements where possible.
	* Fixes and optimization for OPTIONAL groups in Sparql.
	* Sparql CONSTRUCT scopes bnodes properly; DESCRIBE works;
	  CONSTRUCT still has bugs.

2006-04-18 Version 0.72

	* Added SemWeb.Variable class: A subclass of BNode.
	  The N3Reader instantiates ?variables as Variable objects
	  rather than plain BNodes, and the N3Writer will write them
	  out in ?variable notation.  The GraphMatch class now
	  assumes all variables are Variable objects, and nothing else.
	* Added SemWeb.Inferencing.Euler: Inferencing based on
	  Jos De Roo's Euler engine (http://www.agfa.com/w3c/euler/).
	  Experimental and not documented yet.
	* SQL stores: Allow insertion of bnodes outside of Import().
	* SPARQL Extension Functions: New class SemWeb.Query.RdfFunction
	  and new method Sparql.AddExtensionFunction.
	* SPARQL: Numeric comparison filters (i.e. <, >), are optimized
	  by passing them into underlying SQL stores.
	* SPARQL: Better syntax error messages.
	* RdfXmlReader: Raise an error when an invalid parseType is used.
	* Literal: Disallow language and datatype being the empty string.
	* BNode: Disallow localames being the empty string.

2006-03-16 Version 0.711

	* Corrected SQLStore bugs:  Select(SelectFilter) would fail and cancel
	  the select if any of the items werent in the store.  The select
	  optimization to precache metas also had two issues.
	* Corrected a Turtle/N3 parsing error with semicolons
	* Added new classes: SimpleSourceWrapper, FilterSink.
	* Added new spec string type: 'class' for loading a .NET class.
	* Added multi-line spec strings for putting together multiple stores.
	* Added Store.DefaultSelect().

2006-03-11 Version 0.71

	* The Select(Entity[],Entity[],Resource[]) API calls are
	  replaced with new Select(SelectFilter) methods.
	* RdfXmlWriter: Improved and tightened output a lot.
	* Sparql: Major performance improvements.
	* SparqlProtocol: Make sure to dispose of data sources after
	  queries if noreuse is set.  Be sure to flush output.
	* RDFS: Bug fix.  Implement IDisposable so it can be disposed
	  to dispose the underlying data.
	* SQLStore: Limit the number of values in a multi-select to
	  500 to prevent the SQL query from getting too long.  Performance
	  improvement to Select(SelectFilter) by selecting on fewer
	  columns.
	* Query/Sparql refactoring a bit.
	* Added a StatementMap which is a Statement-specialized Hashtable.
	* ByteFx and MySql.Connector MySQL adapters are both compiled now. 
	* Removed Store.Write(RdfWriter).  Use Store.Select(RdfWriter)
	  or writer.Write(store) instead.

2006-01-31 Version 0.7

	* New BNode class.  To create a blank node, use new BNnde()
	  in place of new Entity(null), which will now throw an
	  exception.  BNodes remember their local names in documents
	  so reserialization can reuse the names, when possible.
	* New SemWeb.Inference.RDFS class which wraps any SelectableSource
	  and provides RDFS reasoning over the store through the
	  Select methods.
	* Sparql Protocol handler has been reorganized to make it
	  easy to extend it by overriding methods.
	* Algos for finding MSGs and making graphs lean has been
	  improved and is now not so slow to make it useless (if it works).
	* The default baseuri of the N3Reader is now "#".
	* StatementSources now indicate with their Distinct property
	  whether they guarantee to return distinct statements via Select
	  (and the Select overloads for subinterfaces).

2005-12-10 Version 0.61

	* RdfReaders have a new Namespaces property to expose what
	  namespace prefixes were found in the stream.
	* Added PostgreSQL and BDB (ver 4.3 only) stores.  SQL store
	  performance improvement for Select().
	* There's a new SemWeb.Algos namespace containing a class to
	  find Minimun Self-Contained Graphs and to make a store
	  'lean' by removing redundant subgraphs (but exponentially slow).
	* New method Store::RemoveAll(StatementSource).
	* N3Reader: If a BaseUri was set, overriding it with @prefix :
	  did not work.  Changed an error in RdfXmlReader to a warning;
	* RdfXmlReader now passes all W3C tests (positive & negative).
	* A GraphMatch bug was fixed.
	* Store::GetAllEntities/AllPredicates/AllMetas renamed to just
	  GetEntities/Predicates/Metas. 
	* Statement's Subj/Pred/Obj/Meta properties are now read/write
	  fields.
	* Store::Select(Statement[]) is replaced with something else.

2005-10-19 Version 0.6

	* Renamed QueryEngine to GraphMatch since it does a very limited type
	  of query, and made the API cleaner.
	* Added SemWeb.Query.Sparql, a SPARQL query engine powered by
	  http://sourceforge.net/projects/sparql by Ryan Levering,
	  and deleted my own barely-functional SPARQL parser.
	* GraphMatch only allows anonymous nodes to be variables now, and the
	  N3Reader reads variables as anonymous nodes, but remembers their
	  names.
	* Removed the SelectPartialFilter class and the overloads for
	  Store.Select that took one of those as an argument.
	* The overloads for Select that returned a MemoryStore rather
	  than taking a StatementSink as an argument now return a
	  SelectResult which lazy-loads the results into a MemoryStore
	  if the statements are requested by IEnumerable.  Otherwise it
	  can be used as a StatementSource and passed off to other
	  methods so it won't need to load all of the statements into memory.
	* SQLStore: Clear the store by dropping the tables, rather than
	  deleting all of the rows.
	* Various other bug fixes, including to RdfXmlWriter.

2005-07-24 Version 0.503

	* GetHashCode() for anonmyous resources used to return
	  zero, which made hashtables of anonymous resources
	  very slow.  Now it returns Object.GetHashCode().
	* Fixes in the query engine, SQL store, and N3Reader.
	* Statements now have a default non-null Meta field. The
	  default is Statement.DefaultMeta.
	* Something has made SQLite stores much slower.
	* RdfXmlReader respects the RdfReader.Meta property.
	* MemoryStore.FindEntities wasn't working.
	* The SPARQL parser wasn't reading quoted literals or
	  numbers properly.

2005-07-01 Version 0.502

	* More bug fixes.
	* Query engine totally rewritten, which will
	  make much more sense once its documented.
	* Store.Contains now accepts statement templates.

2005-06-20 Version 0.501

	Just lots of bugs fixed.
	* New API to replace one statement with another statement in a store.
	* New API to test whether a statement template matches a statement.
	* The Resource class now has its == and != operators overloaded.
	* Store.CreateForInput/Output now accepts 'ntriples' 'nt' and 'turtle'.
	* Store.SelectSubjects signature change.
	* Select(Statement[]) for SQL stores works now.
	* SQLLite has a bug in how they handle LEFT JOIN.  SQL store now
	  works around this.
	* SQL stores now index on the meta field.
	* FindEntities works now.
	* N3Writer can output in NTriples, Turtle, or full N3 mode.
	* The query engine works now, and it's better optimized (but it wasn't working before anyway).
	* Xml (Sparql) query result output now has nice indentation.

2005-06-10 Version 0.5

	* First release.

