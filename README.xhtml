<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
	<title>SemWeb RDF Library for C# -- README</title>
	<body>

<p>This is the README for SemWeb, the Semantic Web
library written in C#.  The homepage of the library
is <a href="http://taubz.for.net/code/semweb">http://taubz.for.net/code/semweb</a>
and it is maintained by <a href="http://taubz.for.net">Joshua Tauberer &lt;tauberer@for.net&gt;</a></p>

<p>SemWeb is released under the terms of the Creative Commons
Attribution License: http://creativecommons.org/licenses/by/2.0/,
which means you can distribute this package however you want,
but you need to give me due credit.  I think that's fair.</p>

<p>This document describes version 0.5 of SemWeb which was released
on June 8, 2005.</p>

<h1>Overview</h1>

<p>SemWeb is a fully managed library for manipulating RDF
data for use with the Semantic Web.  It sports the following
features:</p>

<ul>
	<li>Really simple API; really easy to deploy; no platform-specific
	dependencies.</li>
	<li>Reading and writing RDF/XML.  The reader is streaming, which
	means the entire document doesn't ever need to be loaded into
	memory.</li>
	<li>Reading and writing Notation 3 (almost all of it), Turtle, and NTriples.
	The N3 reader and writer are also streaming, going at roughly
	20,000 statements per second.</li>
	<li>Two built-in types of RDF stores: an in-memory hashtable-indexed
	store for small amounts of data and an SQL store with MySQL and SQLite
	backends for large amounts of data.  Writing to the MySQL store
	goes at around 2,000-10,000 statements per second.</li>
	<li>Creating new SQL-based stores takes minutes, and implementing
	other types of stores is as simple as extending an abstract class.</li>
	<li>Statements are quads, not triples.  The fourth <i>meta</i> field
	can be used for application-specific purposes.</li>
	<li>Using statements in a store is a streaming process (see the example).</li>
	<li>Simple reasoning engines based on RDFS and OWL.</li>
	<li>My home-grown RSquary query engine.  It's experimental and
	so-far undocumented, but it's there.  It supports a subset of SPARQL.</li>
	<li>An XPathNavigator implemented over RDF data, allowing
	XPath expressions to be evaluated on a semantic web data model.</li>
</ul>

<h1>Basic Examples</h1>

<p>Below is an example of reading in an RDF/XML file from standard
input and outputting it in N3 format on standard output.</p>

<pre class="code">using System;
using SemWeb;
public class Simple {
	public static void Main() {
		MemoryStore store = new MemoryStore();
		store.Import(new RdfXmlReader(Console.In));
		using (RdfWriter writer = new N3Writer(Console.Out))
			store.Write(writer);
	}
}
</pre>

<p>When compiling programs that use the SemWeb library, be sure
to reference the library with <tt>-r SemWeb.dll</tt>, where
<tt>SemWeb.dll</tt> is the path to the assembly if it's not in
the current directory.</p>
	
<p>The <tt>Select</tt> method on stores provides access to the
statements in the store.  There are a number of overloads for
Select.  The easiest overload takes a statement template as an argument
and returns all of the matching statements in the store.</p>

<pre class="code">foreach (Statement stmt in store.Select(new Statement("http://www.example.com/myobject", null, null))) {
	Console.WriteLine(stmt);
}
</pre>

<p>The <tt>Statement</tt> constructor takes three arguments:
a subject, a predicate, and an object.  It expects <tt>Entity</tt>
objects for its subject and predicate, but an implicit conversion
operator has been defined to convert strings to Entities seamlessly.
It expects a <tt>Resource</tt> for its object argument, which can
be either an <tt>Entity</tt> or a <tt>Literal</tt>.</p>

<p>In the example above, the <tt>Statement</tt> is constructed
with the resource named &lt;http://www.example.com/myobject&gt;
as its subject, with empty predicate and object fields.  The
Select statement returns each statement with that subject,
and with any predicate and object.  You can use <tt>Statement.All</tt>,
the blank template, to select all of the statements in a store.</p>

<p>It is also possible to receive the statements selected by
<tt>Select</tt> in a streaming way, by passing <tt>Select</tt>
a class that implements <tt>StatementSink</tt>.  In this way,
it is not necessary to buffer all of the matching statements
before processing them.</p>

<pre class="code">class MyStatementWriter : StatementSink {
	public bool Add(Statement s) {
		Console.WriteLine(s.Subject);
		return true;  // true means continue streaming
	}
}

store.Select(Statement.All, new MyStatementWriter());
</pre>

<h1>Loading Statements into a MySQL Store</h1>

<p>To load statements into a MySQL store, create the MySQL store as follows:</p>

<pre class="code">Store store = Store.CreateForOutput("mysql:tablename_prefix:Database=databasename; User id=dbusername");</pre>

<p>Then use the store as normal:</p>

<pre class="code">store.Import(new N3Reader(new StreamReader(filename)));</pre>

	</body>
</html>
