<Type Name="GraphMatch" FullName="SemWeb.Query.GraphMatch">
  <TypeSignature Language="C#" Value="public class GraphMatch : SemWeb.Query.Query" />
  <AssemblyInfo>
    <AssemblyName>SemWeb</AssemblyName>
    <AssemblyVersion>0.7.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SemWeb.Query.Query</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphMatch ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Creates an empty GraphMatch object.</summary>
        <remarks>Set up the GraphMatch with calls to <see cref="M:SemWeb.Query.GraphMatch.AddEdge(SemWeb.Statement)" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddEdge">
      <MemberSignature Language="C#" Value="public void AddEdge (SemWeb.Statement filter);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="SemWeb.Statement" />
      </Parameters>
      <Docs>
        <param name="filter">A statement.</param>
        <summary>Adds a required edge to the query graph.</summary>
        <remarks>For each binding returned by the algorithm, <paramref name="filter" /> will be found in the target data model when the variables in <paramref name="filter" /> are replaced by their values.  The variables are the anonymous entities in <paramref name="filter" />, except those passed to <see cref="M:SemWeb.Query.GraphMatch.SetNonVariable(SemWeb.BNode)" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOptionalEdge">
      <MemberSignature Language="C#" Value="public void AddOptionalEdge (SemWeb.Statement filter);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="SemWeb.Statement" />
      </Parameters>
      <Docs>
        <param name="filter">A statement.</param>
        <summary>Adds an optional edge to the query graph.</summary>
        <remarks>For each binding returned by the algorithm, <paramref name="filter" /> may or may not be found in the target data model when the variables in <paramref name="filter" /> are replaced by their values.  The variables are the anonymous entities in <paramref name="filter" />, except those passed to <see cref="M:SemWeb.Query.GraphMatch.SetNonVariable(SemWeb.BNode)" />.  Variables used only in optional edges may be returned bound or unbound in each binding set.  When a variable is not bound, the value of <see cref="P:SemWeb.Query.VariableBinding.Target" /> is <see langword="null" />.
</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphMatch (SemWeb.RdfReader query);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="query" Type="SemWeb.RdfReader" />
      </Parameters>
      <Docs>
        <param name="query">An RDF reader (normally a <see cref="T:SemWeb.N3Reader" />) containing the query.</param>
        <summary>Creates a query based on an RDF file.</summary>
        <remarks>
          <para>The contents of the RDF stream are read.  Statements in the stream are passed to <see cref="M:SemWeb.Query.GraphMatch.AddEdge(SemWeb.Statement)" />.</para>
          <para>All of the anonymous nodes in the stream are considered variables, but only the N3 format allows anonymous nodes to be named variables.  Thus the N3 format is recommended.  Although variable names are not required by the GraphMatch class, they may be needed by whatever processes the query results.</para>
          <example>
            <para>The following is an example query:</para>
            <code>@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;.
@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt;.
?person rdf:type foaf:Agent .
?person foaf:name ?name .</code>
            <para>To run this query:</para>
            <code lang="C#">Store queryGraph = new MemoryStore(new N3Reader(new StringReader(stringAbove)));
new GraphMatch(queryGraph).Run(targetData, Console.Out);  </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphMatch (SemWeb.Store queryModel);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="queryModel" Type="SemWeb.Store" />
      </Parameters>
      <Docs>
        <param name="queryModel">A graph that represents the query.</param>
        <summary>Creates a query based on a graph in a Store.</summary>
        <remarks>See <see cref="C:SemWeb.Query.GraphMatch(SemWeb.StatementSource)" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddValueFilter">
      <MemberSignature Language="C#" Value="public void AddValueFilter (SemWeb.Entity entity, SemWeb.LiteralFilter filter);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="SemWeb.Entity" />
        <Parameter Name="filter" Type="SemWeb.LiteralFilter" />
      </Parameters>
      <Docs>
        <param name="entity">The variable to filter.</param>
        <param name="filter">A filter object to test whether a value matches the filter.</param>
        <summary>Filter the literal values of a variable.</summary>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNonVariable">
      <MemberSignature Language="C#" Value="public void SetNonVariable (SemWeb.BNode anonymousnode);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anonymousnode" Type="SemWeb.BNode" />
      </Parameters>
      <Docs>
        <param name="anonymousnode">An anonymous node in the graph.</param>
        <summary>Indicates that an anonymous node in the query graph is not a varible.</summary>
        <remarks>If the query graph was not created from the data source that contains the target model, no anonymous node in the query could possibly occur in the target model, and so this would prevent the variable from being bound.  However, when a query is derived from the target data model, the anonymous node may be treated as a constant.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVariableName">
      <MemberSignature Language="C#" Value="public void SetVariableName (SemWeb.BNode variable, string name);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="SemWeb.BNode" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="variable">A variable.</param>
        <param name="name">The name for the variable.</param>
        <summary>Sets the variable name for a variable.</summary>
        <remarks>Variable names are merely used for output.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDistinct">
      <MemberSignature Language="C#" Value="public void MakeDistinct (SemWeb.BNode a, SemWeb.BNode b);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="SemWeb.BNode" />
        <Parameter Name="b" Type="SemWeb.BNode" />
      </Parameters>
      <Docs>
        <param name="a">A variable.</param>
        <param name="b">A variable.</param>
        <summary>Ensures two variables have distinct bindings.</summary>
        <remarks>Bindings returned by the query will not have the two variables bound to the same value.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>The GraphMatch class implements an algorithm for determining all of the ways the variables in one graph can be bound to resources in another graph.</summary>
    <remarks>
      <para>GraphMatch implements an algorithm for comparing two graphs.  The query graph is made up of a set of required edges (statements) and, possibly, optional edges.  All anonymous nodes in the query graph are considered variables (unless <see cref="M:SemWeb.Query.GraphMatch.SetNonVariable(SemWeb.BNode)" /> is called for the entity).</para>
      <para>The GraphMatch algorithm determines all ways the variables in the graph can bind to entities in the target data.  Each way in which the variables can be bound is returned through a call to <see cref="M:SemWeb.Query.QueryResultSink.Add(SemWeb.Query.VariableBinding[])" /> of the <see cref="T:SemWeb.Query.QueryResultSink" /> passed to <see cref="M:SemWeb.Query.Query.Run(SemWeb.SelectableSource,SemWeb.Query.QueryResultSink)" />.</para>
      <para>For an example, see <see cref="C:SemWeb.Query.GraphMatch(SemWeb.RdfReader)" />.</para>
      <para>Optional edges are evaluated last.  Variables used only in optional edges may be returned bound or unbound in each binding set.  When a variable is not bound, the value of <see cref="P:SemWeb.Query.VariableBinding.Target" /> is <see langword="null" />.</para>
    </remarks>
  </Docs>
</Type>
