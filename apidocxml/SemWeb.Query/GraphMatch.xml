<Type Name="GraphMatch" FullName="SemWeb.Query.GraphMatch">
  <TypeSignature Language="C#" Value="public class GraphMatch : SemWeb.Query.Query" />
  <AssemblyInfo>
    <AssemblyName>SemWeb</AssemblyName>
    <AssemblyVersion>0.8.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SemWeb.Query.Query</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphMatch ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Creates an empty GraphMatch object.</summary>
        <remarks>Set up the GraphMatch with calls to <see cref="M:SemWeb.Query.GraphMatch.AddEdge(SemWeb.Statement)" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphMatch (SemWeb.RdfReader query);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="query" Type="SemWeb.RdfReader" />
      </Parameters>
      <Docs>
        <param name="query">An RDF reader (normally a <see cref="T:SemWeb.N3Reader" />) containing the query.</param>
        <summary>Creates a query based on an RDF file.</summary>
        <remarks>
          <para>The contents of the RDF stream are read.  Statements in the stream are passed to <see cref="M:SemWeb.Query.GraphMatch.AddEdge(SemWeb.Statement)" />.</para>
          <para>All of the anonymous nodes in the stream are considered variables, but only the N3 format allows anonymous nodes to be named variables.  Thus the N3 format is recommended.  Although variable names are not required by the GraphMatch class, they may be needed by whatever processes the query results.</para>
          <example>
            <para>The following is an example query:</para>
            <code>@prefix rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;.
@prefix foaf: &lt;http://xmlns.com/foaf/0.1/&gt;.
?person rdf:type foaf:Agent .
?person foaf:name ?name .</code>
            <para>To run this query:</para>
            <code lang="C#">Store queryGraph = new MemoryStore(new N3Reader(new StringReader(stringAbove)));
new GraphMatch(queryGraph).Run(targetData, Console.Out);  </code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphMatch (SemWeb.Store queryModel);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="queryModel" Type="SemWeb.Store" />
      </Parameters>
      <Docs>
        <param name="queryModel">A graph that represents the query.</param>
        <summary>Creates a query based on a graph in a Store.</summary>
        <remarks>See <see cref="C:SemWeb.Query.GraphMatch(SemWeb.StatementSource)" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddGraphStatement">
      <MemberSignature Language="C#" Value="public void AddGraphStatement (SemWeb.Statement statement);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="SemWeb.Statement" />
      </Parameters>
      <Docs>
        <param name="statement">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLiteralFilter">
      <MemberSignature Language="C#" Value="public void AddLiteralFilter (SemWeb.Variable variable, SemWeb.LiteralFilter filter);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="SemWeb.Variable" />
        <Parameter Name="filter" Type="SemWeb.LiteralFilter" />
      </Parameters>
      <Docs>
        <param name="variable">To be added.</param>
        <param name="filter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVariableRange">
      <MemberSignature Language="C#" Value="public void SetVariableRange (SemWeb.Variable variable, System.Collections.ICollection range);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="SemWeb.Variable" />
        <Parameter Name="range" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="variable">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>The GraphMatch class implements an algorithm for determining all of the ways the variables in one graph can be bound to resources in another graph.</summary>
    <remarks>None.</remarks>
  </Docs>
</Type>
