<Type Name="SparqlProtocolServerHandler" FullName="SemWeb.Query.SparqlProtocolServerHandler">
  <TypeSignature Language="C#" Value="public class SparqlProtocolServerHandler : System.Web.IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>SemWeb.Sparql</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.7.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Implements a SPARQL Protocol server for ASP.NET.</summary>
    <remarks>
      <para>This class implements the <see cref="T:System.Web.IHttpHandler" /> interface to provide a SPARQL Protocol query server over HTTP.</para>
      <para>To activate the SPARQL server in your ASP.NET site, place the SemWeb.dll, SemWeb.Sparql.dll, and sparql-core.dll assemblies in the bin directory of your ASP.NET application.  Then add the following to your web.config file.  Note that you must specify a spec string to a data source to serve, as described in <see cref="M:SemWeb.Store.CreateForInput(string)" />.</para>
      <example>
        <code>&lt;configuration&gt;
     &lt;configSections&gt;
          &lt;section name="sparqlSources" type="System.Configuration.NameValueSectionHandler"/&gt;
     &lt;/configSections&gt;

     &lt;system.web&gt;
          &lt;httpHandlers&gt;
               &lt;!-- This line associates the SPARQL Protocol implementation with a path on your
                    website. With this, you get a SPARQL server at http://yourdomain.com/sparql.  --&gt;
               &lt;add verb="*" path="sparql" type="SemWeb.Query.SparqlProtocolServerHandler, SemWeb.Sparql" /&gt;
          &lt;/httpHandlers&gt;
     &lt;/system.web&gt;

     &lt;sparqlSources&gt;
          &lt;!-- This line configures the data source associated with each SPARQL server added above.
                  This sets the server to query the RDF/XML file at the given path.  You can use any
                  spec string described in SemWeb.Store.CreateForInput(). --&gt;
          &lt;add key="/sparql" value="xml:/home/user/datafile.rdf"/&gt;
     &lt;/sparqlSources&gt;
&lt;/configuration&gt;</code>
      </example>
      <para>Precede the data source specification string with "rdfs+" to wrap the data source with
      the <see cref="T:SemWeb.Inference.RDFS" /> reasoning engine.  And precede that with "noreuse," to
	  create a new instance of the data source on each request, which is good for SQL-backed stores
	  to allow for concurrent queries, but bad for file-backed stores which would be read from disk
	  on each request.  For instance:</para>
      <example>
        <code>&lt;add key="/sparql" value="noreuse,rdfs+mysql:rdftable:Database=databasename;Server=localhost;User Id=username"/&gt;</code>
      </example>
      <para>Using Mono's XSP light-weight web server, you can create a standalone SPARQL Protocol server by:</para>
      <list type="bullet">
        <item>
          <term>Creating a new directory for your server.</term>
        </item>
        <item>
          <term>Creating a bin directory within it, and placing the files mentioned above into the directory.</term>
        </item>
        <item>
          <term>Creating a web.config file in the directory using the template above.</term>
        </item>
        <item>
          <term>Running "xsp" or "xsp2" from within the directory. Use "xsp" if you have include the .NET 1.1 SemWeb binary DLLs, otherwise "xsp2".</term>
        </item>
      </list>
      <para>To run the SPARQL protocol server under Apache with mod_mono, you just need to place the web.config file in a working ASP.NET application and instruct Apache to use ASP.NET to handle the path to the endpoint Here's a minimal Apache configuration:</para>
      <example>
        <code>
MonoAutoApplication disabled
MonoServerPath /usr/local/bin/mod-mono-server2 # if using the .NET 2.0 SemWeb DLLs only
MonoApplications "/:/var/www"
&lt;Location /sparql&gt;
    SetHandler mono
&lt;/Location&gt;</code>
      </example>
      <para>To use Apache and mod_aspdotnet on Windows, use this Apache configuration instead:</para>
      <example>
        <code>
AspNetMount / "C:/webserver/doc_root"
&lt;Location /sparql&gt;
    SetHandler asp.net
    AspNet Virtual
&lt;/Location&gt;</code>
      </example>
      <para>You may want to add this index.html file to create a form to experiment with SPARQL queries:</para>
      <example>
        <code>&lt;html&gt;
     &lt;body&gt;
          &lt;form action="/sparql" method="get"&gt;
        &lt;input type="hidden" name="outputMimeType" value="text/xml"/&gt;
        &lt;textarea name="query" rows="10" cols="80"&gt;
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;
PREFIX foaf: &lt;http://xmlns.com/foaf/0.1/&gt;
PREFIX pol: &lt;tag:govshare.info,2005:rdf/politico/&gt;
SELECT * WHERE {
?s rdf:type pol:Politician .
?s foaf:gender "male" .
?s foaf:name ?name .
}
LIMIT 10
        &lt;/textarea&gt;
        &lt;p&gt;&lt;input type="submit"/&gt;&lt;/p&gt;
          &lt;/form&gt;
     &lt;/body&gt;
&lt;/html&gt;  </code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SparqlProtocolServerHandler ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Creates a new SPARQL Protocol implementation class.</summary>
        <remarks>This class does not listen on an HTTP port by itself.  It is meant to be embedded in an ASP.NET site.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="CreateQuery">
      <MemberSignature Language="C#" Value="protected virtual SemWeb.Query.Query CreateQuery (string query);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Query.Query</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="query">The SPARQL query as a string.</param>
        <summary>Constructs a Query object for a SPARQL query.</summary>
        <returns>A Query object.</returns>
        <remarks>The default implementation returns a new SPARQL query object based on the
        query.  Override in subclasses to create a query in a different way, or to set
        limits on the query.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="GetDataSource">
      <MemberSignature Language="C#" Value="protected virtual SemWeb.SelectableSource GetDataSource (out bool closeAfterQuery);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.SelectableSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closeAfterQuery" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="closeAfterQuery">Set to true to indicate that the data source should be closed/disposed after the query is complete.</param>
        <summary>Gets the data source to query.</summary>
        <returns>A data source to query.</returns>
        <remarks>None.</remarks>
        <exception cref="T:System.InvalidOperationException">To be added; from: <see cref="M:SemWeb.Query.SparqlProtocolServerHandler.GetDataSource(System.Boolean@)" /></exception>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="MaximumLimit">
      <MemberSignature Language="C#" Value="public int MaximumLimit;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The maximum number of bindings to return for any query.</summary>
        <remarks>Set to -1, the default, to have no limit.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public virtual void ProcessRequest (System.Web.HttpContext context);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">The request context.</param>
        <summary>Processes an HTTP request from the ASP.NET subsystem.</summary>
        <remarks>This method is not meant to be called from user code.</remarks>
      </Docs>
      <ImplementsInterfaceMethods>
        <InterfaceImpl Type="System.Web.IHttpHandler" Member="ProcessRequest" cref="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      </ImplementsInterfaceMethods>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="RunQuery">
      <MemberSignature Language="C#" Value="protected virtual void RunQuery (SemWeb.Query.Query query, SemWeb.SelectableSource source, System.IO.TextWriter output);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="SemWeb.Query.Query" />
        <Parameter Name="source" Type="SemWeb.SelectableSource" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="query">The query to run.</param>
        <param name="source">The data source to query against.</param>
        <param name="output">The output stream.</param>
        <summary>Runs a query.</summary>
        <remarks>The default implementation runs the query on the data source and outputs the
        results in the SPARQL XML Results specification format.  Override in subclasses to
        output the results in a different way, to run the query differently, or to set
        limits on the query or output.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="System.Web.IHttpHandler.IsReusable">
      <MemberSignature Language="C#" Value="bool System.Web.IHttpHandler.IsReusable { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>
