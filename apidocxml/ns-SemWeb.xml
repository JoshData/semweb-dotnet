<Namespace Name="SemWeb">
  <Docs>
    <summary><para>The SemWeb namespace contains the core library classes.</para>

</summary>
    <remarks><para>The <see cref="T:SemWeb.Statement" /> structure represents a RDF statement, with a subject. predicate, object, and meta value.  The use of the meta field is optional and application-specified.</para>

<para>Subjects, predicates, objects, and metas are all <see cref="T:SemWeb.Resource" /> objects.  <see cref="T:SemWeb.Resource" /> is an abstract class with two subclasses: <see cref="T:SemWeb.Entity" /> and <see cref="T:SemWeb.Literal" />.  Only objects can be literals.  The <see cref="T:SemWeb.Entity" /> class has one subclass, <see cref="T:SemWeb.BNode" />, for blank nodes (anonymous entities), which itself has a subclass <see cref="T:SemWeb.Variable" /> for use with queries.</para>

<para>Graphs, or repositories of statements, are contained in classes that variously implement <see cref="T:SemWeb.StatementSource" /> (for forward-only streaming of statements), <see cref="T:SemWeb.SelectableSource" /> (for data sources that support querying for triples based on simple triple templates), and/or <see cref="T:SemWeb.QueryableSource" /> (for data sources that support queries on simple conjunctive graph patterns). Often you will put an instance of one of those classes into a <see cref="T:SemWeb.Store" />, which wraps the data source with additional functionality and provides default implementations of methods (like querying) for data sources that don't support the operations themselves. You can, in fact, put multiple data sources within a Store to automatically have the stores act together as a single data source. The <see cref="T:SemWeb.MemoryStore" /> class is for a graph held in memory. Data sources for holding graphs in SQL databases are also provided.  Create them through either <see cref="M:SemWeb.Store.CreateForInput(string)" /> or <see cref="M:SemWeb.Store.CreateForOutput(string)" />.</para>

<para>RDF input/output is done through the <see cref="T:SemWeb.RdfReader" /> and  <see cref="T:SemWeb.RdfWriter" /> classes.  These are abstract base classes with RDF/XML and Notation 3 implementations. The <see cref="T:SemWeb.N3Reader" /> and <see cref="T:SemWeb.N3Writer" /> are used for reading and writing data in Notation 3 format.  Most of the N3 specification is supported, including everything in NTriples and Turtle.  N3 is the recommended format for IO because reading and writing N3 data does not require loading the entire data source into memory, it supports all valid RDF graphs, and namespaces do not need to be configured by the user. The <see cref="T:SemWeb.RdfXmlReader" /> and <see cref="T:SemWeb.RdfXmlWriter" /> are used for reading and writing data in RDF/XML format.  Like the N3Reader, the RdfXmlReader streams statements as they are read from the stream. However, the RdfXmlWriter creates the entire output document in memory before writing anything to the stream, so it is not a recommended output form. Also bear in mind that RDF/XML cannot be used for all RDF graphs, such as those with blank nodes as predicates, and it may require that the user explicitly provides namespace prefixes for some URIs used in the data.</para>

<para>You can also use <see cref="M:SemWeb.RdfReader.LoadFromUri(System.Uri)" /> to load RDF data, in either format, from a web address.</para></remarks>
  </Docs>
</Namespace>
