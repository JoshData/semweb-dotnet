<Type Name="Store" FullName="SemWeb.Store">
  <TypeSignature Language="C#" Value="public abstract class Store : SemWeb.StatementSink, SemWeb.StatementSource" />
  <AssemblyInfo>
    <AssemblyName>SemWeb</AssemblyName>
    <AssemblyVersion>0.5.0.2</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>SemWeb.StatementSink</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>SemWeb.StatementSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Members>
    
    
    
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public abstract void Clear ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the contents of the store.</summary>
        <remarks>The store is empty after a call to Clear.</remarks>
      </Docs>
    </Member>
    
    
    
    
    <Member MemberName="GetEntitiesOfType">
      <MemberSignature Language="C#" Value="public SemWeb.Entity[] GetEntitiesOfType (SemWeb.Entity type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Entity[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="SemWeb.Entity" />
      </Parameters>
      <Docs>
        <param name="type">The type of entities to return.</param>
        <summary>Returns an array of all entities in the store whose type is known to be the given type.</summary>
        <returns>An array of all entities in the store whose type is known to be the given type.</returns>
        <remarks>Types are indicated using the rdf:type predicate.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public abstract void Add (SemWeb.Statement statement);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="SemWeb.Statement" />
      </Parameters>
      <Docs>
        <param name="statement">The statement to add.</param>
        <summary>Adds a statement to the store.</summary>
        <remarks>The Subject, Predicate, and Object fields of the statement must not be <see langword="null" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public abstract void Remove (SemWeb.Statement statement);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="SemWeb.Statement" />
      </Parameters>
      <Docs>
        <param name="statement">A statement or statement template to remove from the store.</param>
        <summary>Removes statements from the store.</summary>
        <remarks>All statements in the store that match <paramref name="statement" /> are removed.  The <paramref name="statement" /> argument is a template.  The non-<see langword="null" /> fields of <paramref name="statement" /> are used as a filter on the statements in the store.  Statements that match the filter are removed.  <see langword="null" /> fields of <paramref name="statement" /> are ignored during filtering.  Any field in <paramref name="statement" /> (Subject, Predicate, Object, and Meta) may be <see langword="null" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public virtual void Import (SemWeb.StatementSource source);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="SemWeb.StatementSource" />
      </Parameters>
      <Docs>
        <param name="source">The source whose statements will be added into the store.</param>
        <summary>Loads the contents of a StatementSource into the store.</summary>
        <remarks>This method wraps a call to <see cref="M:SemWeb.StatementSource.Select(SemWeb.StatementSink" /> in store-specific code that prepares the store for receiving many statements.  The store may make itself locked for access by other processes to make the parsing faster.  To avoid this, call <see cref="M:SemWeb.StatementSource.Select(SemWeb.StatementSink)" /> directly.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (SemWeb.Statement statement);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="SemWeb.Statement" />
      </Parameters>
      <Docs>
        <param name="statement">The statement to search for, or a statement template.</param>
        <summary>Returns whether the store contains a statement, or any
statement that matches the template.</summary>
        <returns>
          <see langword="true" /> if the store contains the statement or
any statement matching the template.</returns>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select (SemWeb.Statement template, SemWeb.StatementSink result);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="template" Type="SemWeb.Statement" />
        <Parameter Name="result" Type="SemWeb.StatementSink" />
      </Parameters>
      <Docs>
        <param name="template">A statement template.  Use <see cref="F:SemWeb.Statement.Empty" /> to select all statements in the store, or a statement with <see langword="null" /> fields to select statements that match the non-<see langword="null" /> parts of the statement.</param>
        <param name="result">A StatementSink to which each matching statement will be added.</param>
        <summary>Queries the story for matching statements, and writes the statements to a <see cref="T:SemWeb.StatementSink" />.</summary>
        <remarks>This method calls <see cref="M:SemWeb.Store.Select(SemWeb.Statement,SemWeb.SelectPartialFilter,SemWeb.StatementSink)" /> with <see cref="F:SemWeb.SelectPartialFilter.All" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select (SemWeb.Statement[] templates, SemWeb.StatementSink result);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templates" Type="SemWeb.Statement[]" />
        <Parameter Name="result" Type="SemWeb.StatementSink" />
      </Parameters>
      <Docs>
        <param name="templates">An array of statement templates.  Statements matching any of the templates are returned to <paramref name="result" />.</param>
        <param name="result">A StatementSink to which each matching statement will be added.</param>
        <summary>Queries the story for statements matching one of many templates, and writes the statements to a <see cref="T:SemWeb.StatementSink" />.</summary>
        <remarks>This method calls <see cref="M:SemWeb.Store.Select(SemWeb.Statement[],SemWeb.SelectPartialFilter,SemWeb.StatementSink)" /> with <see cref="F:SemWeb.SelectPartialFilter.All" />.</remarks>
      </Docs>
    </Member>
    
    <Member MemberName="SelectObjects">
      <MemberSignature Language="C#" Value="public SemWeb.Resource[] SelectObjects (SemWeb.Entity subject, SemWeb.Entity predicate);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Resource[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subject" Type="SemWeb.Entity" />
        <Parameter Name="predicate" Type="SemWeb.Entity" />
      </Parameters>
      <Docs>
        <param name="subject">The subject of the statements to query.</param>
        <param name="predicate">The predicate of the statements to query.</param>
        <summary>Finds all objects in statements with the given subject and predicate.</summary>
        <returns>An array of the entities found as the object of the matching statements, excluding literal values.  An entity occurs in the array at most once.</returns>
        <remarks>
          <block subset="none" type="note">
  <para>This method is not recommended when the store can contain a large number of statements, as every matching entity must be loaded into memory before this method returns.</para>
</block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectSubjects">
      <MemberSignature Language="C#" Value="public SemWeb.Entity[] SelectSubjects (SemWeb.Entity predicate, SemWeb.Resource object);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Entity[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="SemWeb.Entity" />
        <Parameter Name="object" Type="SemWeb.Resource" />
      </Parameters>
      <Docs>
        <param name="predicate">The predicate of the statements to query.</param>
        <param name="object">The object of the statements to query.</param>
        <summary>Finds all subjects in statements with the given predicate and object.</summary>
        <returns>An array of the entities found as the subject of the matching statements.  An entity occurs in the array at most once.</returns>
        <remarks>
          <block subset="none" type="note">
  <para>This method is not recommended when the store can contain a large number of statements, as every matching entity must be loaded into memory before this method returns.</para>
</block>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (SemWeb.RdfWriter writer);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="SemWeb.RdfWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The writer to which the statements of the store are sent.</param>
        <summary>Writes the contents of the store to a <see cref="T:SemWeb.RdfWriter" />.</summary>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    
    
    
    <Member MemberName="StatementCount">
      <MemberSignature Language="C#" Value="public abstract int StatementCount { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of statements in the store.</summary>
        <value>The number of statements in the store.</value>
        <remarks>None.</remarks>
      </Docs>
    </Member>
  <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.TextWriter writer);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">The stream to which statements are sent.</param>
        <summary>Writes the contents of the store to a stream in N3 format.</summary>
        <remarks>None.</remarks>
      </Docs>
    </Member>
  
  <Member MemberName="GetAllEntities">
      <MemberSignature Language="C#" Value="public abstract SemWeb.Entity[] GetAllEntities ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Entity[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of all entities mentioned in the store.</summary>
        <returns>An array of all entities mentioned in the store.</returns>
        <remarks>None.</remarks>
      </Docs>
    </Member>
  <Member MemberName="GetAllPredicates">
      <MemberSignature Language="C#" Value="public abstract SemWeb.Entity[] GetAllPredicates ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Entity[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of all predicates mentioned in the store.</summary>
        <returns>An array of all predicates mentioned in the store.</returns>
        <remarks>None.</remarks>
      </Docs>
    </Member>
  <Member MemberName="GetResourceKey">
      <MemberSignature Language="C#" Value="protected object GetResourceKey (SemWeb.Resource resource);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="SemWeb.Resource" />
      </Parameters>
      <Docs>
        <param name="resource">The resource from which the cached information is retrieved.</param>
        <summary>Used by Store implementations to retrieve cached information in an entity.</summary>
        <returns>The object previously cached with <paramref name="resource" /> by a call to <see cref="M:SemWeb.Store.SetResourceKey(SemWeb.Resource,System.Object)" />, or <see langword="null" /> if no resource key was set.</returns>
        <remarks>None.</remarks>
      </Docs>
    </Member>
  <Member MemberName="SetResourceKey">
      <MemberSignature Language="C#" Value="protected void SetResourceKey (SemWeb.Resource resource, object value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resource" Type="SemWeb.Resource" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resource">The resource onto which the data is kept.</param>
        <param name="value">Data to be associated with the resource.</param>
        <summary>Used by Store implementations to cache information with the entity.</summary>
        <remarks>
          <paramref name="value" /> is stored in a Hashtable within <paramref name="resource" />.  To retreive the value later, use <see cref="M:SemWeb.Store.GetResourceKey" />.</remarks>
      </Docs>
    </Member>
  <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public abstract void Select (SemWeb.Statement template, SemWeb.SelectPartialFilter partialFilter, SemWeb.StatementSink result);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="template" Type="SemWeb.Statement" />
        <Parameter Name="partialFilter" Type="SemWeb.SelectPartialFilter" />
        <Parameter Name="result" Type="SemWeb.StatementSink" />
      </Parameters>
      <Docs>
        <param name="template">A statement template.  Use <see cref="F:SemWeb.Statement.Empty" /> to select all statements in the store, or a statement with <see langword="null" /> fields to select statements that match the non-<see langword="null" /> parts of the statement.</param>
        <param name="partialFilter">A partial filter, indicating which fields in the resulting statements are of interest. Use <see cref="F:SemWeb.SelectPartialFilter.All" /> when all fields are of interest.</param>
        <param name="result">A StatementSink to which each matching statement will be added.</param>
        <summary>Queries the story for matching statements, according to a partial filter, and writes the statements to a <see cref="T:SemWeb.StatementSink" />.</summary>
        <remarks>
          <para>Each statement in the store matching <paramref name="template" /> is added to <paramref name="result" /> with a call to <see cref="M:SemWeb.StatementSink.Add(SemWeb.Statement)" />.  If the call to Add returns <see langword="false" />, the select operation is aborted and returns immediately.</para>

<para>
            <paramref name="template" /> is a statement template, which means any field in <paramref name="template" /> may be <see langword="null" />, and those fields are excluded from the statement filter. For example, setting the Subject and Predicate fields but leaving the Object and Meta fields <see langword="null" /> will match all statements in the store that have the given Subject and Predicate, and anything in their Object and Meta fields.</para>

<para>
            <paramref name="partialFilter" /> indicates which fields in the matching statements are of interest.  Normally <see cref="F:SemWeb.SelectPartialFilter.All" /> is used, indicating full statements should be returned.  Setting fields in <paramref name="partialFilter" /> to <see langword="false" /> indicates that those fields are not important, and the matching statements will have their corresponding fields set to <see langword="null" />.  For example, if <paramref name="partialFilter" />.Predicate == <see langword="false" />, then the Predicate fields in the statements sent to <paramref name="result" /> will all be <see langword="null" />.  If <see cref="F:SemWeb.SelectPartialFilter.All" /> is used, the Subject, Predicate, and Object fields of resulting statements are guaranteed to never be <see langword="null" />.</para>

<para>The partial filter is used to increase the speed of select operations when only partial information is desired. The benefit of using a partial filter depends on the store implementation.</para></remarks>
      </Docs>
    </Member>
  <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public abstract void Select (SemWeb.Statement[] templates, SemWeb.SelectPartialFilter partialFilter, SemWeb.StatementSink result);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templates" Type="SemWeb.Statement[]" />
        <Parameter Name="partialFilter" Type="SemWeb.SelectPartialFilter" />
        <Parameter Name="result" Type="SemWeb.StatementSink" />
      </Parameters>
      <Docs>
        <param name="templates">An array of statement templates.  Statements matching any of the templates are returned to <paramref name="result" />.</param>
        <param name="partialFilter">A partial filter, indicating which fields in the resulting statements are of interest. Use <see cref="F:SemWeb.SelectPartialFilter.All" /> when all fields are of interest.</param>
        <param name="result">A StatementSink to which each matching statement will be added.</param>
        <summary>Queries the story for statements matching one of many templates, according to a partial filter, and writes the statements to a <see cref="T:SemWeb.StatementSink" />.</summary>
        <remarks>
          <para>This method performs the same task as <see cref="M:SemWeb.Store.Select(SemWeb.Statement,SemWeb.SelectPartialFilter,SemWeb.StatementSink)" />, but with an array of templates that are applied in one call.  See <see cref="M:SemWeb.Store.Select(SemWeb.Statement,SemWeb.SelectPartialFilter,SemWeb.StatementSink)" /> for more information.</para>
</remarks>
      </Docs>
    </Member>
  
  <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public abstract void Replace (SemWeb.Entity find, SemWeb.Entity replacement);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="find" Type="SemWeb.Entity" />
        <Parameter Name="replacement" Type="SemWeb.Entity" />
      </Parameters>
      <Docs>
        <param name="find">The Entity to search for in the store.</param>
        <param name="replacement">The Entity to replace <paramref name="a" />.</param>
        <summary>Replaces all occurences of one Entity with another Entity.</summary>
        <remarks>All occurences of <paramref name="a" /> in statements in the store are replaced with references to <paramref name="b" />.</remarks>
      </Docs>
    </Member>
  <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Store ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>The constructor used by inherited classes.</summary>
        <remarks>None.</remarks>
      </Docs>
    </Member>
  <Member MemberName="CreateForInput">
      <MemberSignature Language="C#" Value="public static SemWeb.StatementSource CreateForInput (string spec);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.StatementSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spec" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="spec">A specifier string, whose format is given below.</param>
        <summary>Creates a store from which statements will be read.</summary>
        <returns>A StatementSource from which statements can be read.  A RdfReader or Store is returned.</returns>
        <remarks>
          <para>The specifier string is in one of the following formats.  When a filename is expected, a dash can be used to indicate standard input.</para>

<list type="table">
  <listheader>
    <term>
                <paramref name="spec" />
              </term>
    <description>Meaning</description>
  </listheader>
  <item>
    <term>mem</term>
    <description>A new <see cref="T:SemWeb.MemoryStore" />.</description>
  </item>
  <item>
    <term>xml:[filename]</term>
    <description>A <see cref="T:SemWeb.RdfXmlReader" /> to read the RDF/XML file.</description>
  </item>
  <item>
    <term>
                <para>n3:[filename]</para>
                <para>turtle:[filename]</para>
                <para>nt:[filename]</para>
                <para>ntriples:[filename]</para>
              </term>
    <description>A <see cref="T:SemWeb.N3Reader" /> to read the N3/Turtle/NTriples file.</description>
  </item>
  <item>
    <term>sqlite:[table]:[connection string]</term>
    <description>A <see cref="T:SemWeb.Stores.SQLStore" /> connected to the SQLite database given in the connection string, using the tables prefixed by the table parameter.</description>
  </item>
  <item>
    <term>mysql:[table]:[connection string]</term>
    <description>A <see cref="T:SemWeb.Stores.SQLStore" /> connected to the MySQL database given in the connection string, using the tables prefixed by the table parameter.</description>
  </item>
</list></remarks>
      </Docs>
    </Member>
  <Member MemberName="CreateForOutput">
      <MemberSignature Language="C#" Value="public static SemWeb.StatementSink CreateForOutput (string spec);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.StatementSink</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spec" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="spec">A specification string whose format is given below.</param>
        <summary>Creates a <see cref="T:SemWeb.StatementSink" /> into which statements will be added.</summary>
        <returns>A StatementSink.</returns>
        <remarks>
          <para>The specifier string is in one of the following formats.  When a filename is expected, a dash can be used to indicate standard output.</para>

<list type="table">
  <listheader>
    <term>
                <paramref name="spec" />
              </term>
    <description>Meaning</description>
  </listheader>
  <item>
    <term>mem</term>
    <description>A new <see cref="T:SemWeb.MemoryStore" />.</description>
  </item>
  <item>
    <term>xml:[filename]</term>
    <description>A <see cref="T:SemWeb.RdfXmlWriter" /> opened on the given file.</description>
  </item>
  <item>
    <term>
                <para>n3:[filename]</para>
                <para>turtle:[filename]</para>
                <para>nt:[filename]</para>
                <para>ntriples:[filename]</para>
              </term>
    <description>A <see cref="T:SemWeb.N3Writer" /> opened on the given file, writing in the indicated format.</description>
  </item>
  <item>
    <term>sql:[table]</term>
    <description>A <see cref="T:SemWeb.IO.SQLWriter" /> writing to standard output, using the given table prefix.  SQL writers write SQL statements which can be loaded into a database that can be used by the <see cref="T:SemWeb.Stores.SQLStore" />.</description>
  </item>
  <item>
    <term>sqlite:[table]:[connection string]</term>
    <description>A <see cref="T:SemWeb.Stores.SQLStore" /> connected to the SQLite database given in the connection string, using the tables prefixed by the table parameter.</description>
  </item>
  <item>
    <term>mysql:[table]:[connection string]</term>
    <description>A <see cref="T:SemWeb.Stores.SQLStore" /> connected to the MySQL database given in the connection string, using the tables prefixed by the table parameter.</description>
  </item>
</list></remarks>
      </Docs>
    </Member>
  <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public SemWeb.MemoryStore Select (SemWeb.Statement template);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.MemoryStore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="template" Type="SemWeb.Statement" />
      </Parameters>
      <Docs>
        <param name="template">A statement template.  Use <see cref="F:SemWeb.Statement.Empty" /> to select all statements in the store, or a statement with <see langword="null" /> fields to select statements that match the non-<see langword="null" /> parts of the statement.</param>
        <summary>Queries the store for matching statements and holds the resulting statements in memory.</summary>
        <returns>A <see cref="T:SemWeb.MemoryStore" /> cotnaining the matching statements.</returns>
        <remarks>
          <para>Each statement in the store matching <paramref name="template" /> is added to the <see cref="T:SemWeb.MemoryStore" /> that is returned.</para>

<para>
            <paramref name="template" /> is a statement template, which means any field in <paramref name="template" /> may be <see langword="null" />, and those fields are excluded from the statement filter. For example, setting the Subject and Predicate fields but leaving the Object and Meta fields <see langword="null" /> will match all statements in the store that have the given Subject and Predicate, and anything in their Object and Meta fields.</para>


<block subset="none" type="note">
  <para>This method is not advised when the store may contain a large number of statements, as the entire result of the query must be loaded into memory before the method returns.</para>
</block></remarks>
      </Docs>
    </Member>
  <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public SemWeb.MemoryStore Select (SemWeb.Statement template, SemWeb.SelectPartialFilter partialFilter);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.MemoryStore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="template" Type="SemWeb.Statement" />
        <Parameter Name="partialFilter" Type="SemWeb.SelectPartialFilter" />
      </Parameters>
      <Docs>
        <param name="template">A statement template.  Use <see cref="F:SemWeb.Statement.Empty" /> to select all statements in the store, or a statement with <see langword="null" /> fields to select statements that match the non-<see langword="null" /> parts of the statement.</param>
        <param name="partialFilter">A partial filter, indicating which fields in the resulting statements are of interest. Use <see cref="F:SemWeb.SelectPartialFilter.All" /> when all fields are of interest.</param>
        <summary>Queries the store for matching statements according to a partial filter and holds the resulting statements in memory.</summary>
        <returns>A <see cref="T:SemWeb.MemoryStore" /> cotnaining the matching statements.</returns>
        <remarks>
          <para>See <see cref="M:SemWeb.Store.Select(SemWeb.Statement,SemWeb.SelectPartialFilter,SemWeb.StatementSink)" /> for more information on the use of partial filters. </para>

<block subset="none" type="note">
  <para>This method is not advised when the store may contain a large number of statements, as the entire result of the query must be loaded into memory before the method returns.</para>
</block></remarks>
      </Docs>
    </Member>
  
  <Member MemberName="FindEntities">
      <MemberSignature Language="C#" Value="public virtual SemWeb.Entity[] FindEntities (SemWeb.Statement[] filters);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Entity[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filters" Type="SemWeb.Statement[]" />
      </Parameters>
      <Docs>
        <param name="filters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select (SemWeb.StatementSink result);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="SemWeb.StatementSink" />
      </Parameters>
      <Docs>
        <param name="result">The destination for the statements in this store.</param>
        <summary>Streams all statements in this store into a StatementSink.</summary>
        <remarks>The <see cref="M:SemWeb.StatementSink.Add(SemWeb.Statement)" /> method is called on <paramref name="result" /> for each statement in this store.</remarks>
      </Docs>
    </Member>
  <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public abstract void Replace (SemWeb.Statement find, SemWeb.Statement replacement);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="find" Type="SemWeb.Statement" />
        <Parameter Name="replacement" Type="SemWeb.Statement" />
      </Parameters>
      <Docs>
        <param name="find">The statement to find.  This parameter must be a complete statement (with subject, predicate, and object non-null), not a template.</param>
        <param name="replacement">The statement that will replace the first statement.</param>
        <summary>Replaces a single statement with another statement.</summary>
        <remarks>Store implementations may choose to optimize this method over a call to Remove followed by Add.</remarks>
      </Docs>
    </Member>
  <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public SemWeb.MemoryStore Select (SemWeb.Statement[] templates);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.MemoryStore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templates" Type="SemWeb.Statement[]" />
      </Parameters>
      <Docs>
        <param name="templates">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public SemWeb.MemoryStore Select (SemWeb.Statement[] templates, SemWeb.SelectPartialFilter partialFilter);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.MemoryStore</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="templates" Type="SemWeb.Statement[]" />
        <Parameter Name="partialFilter" Type="SemWeb.SelectPartialFilter" />
      </Parameters>
      <Docs>
        <param name="templates">To be added.</param>
        <param name="partialFilter">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>A repository for <see cref="T:SemWeb.Statement" />s.</summary>
    <remarks>This class is abstract.  The <see cref="T:SemWeb.MemoryStore" /> maintains an in-memory array of statements.  Other stores are available in the <see cref="N:SemWeb.Stores" /> namespace.</remarks>
  </Docs>
</Type>
