<Type Name="SelectableSource" FullName="SemWeb.SelectableSource">
  <TypeSignature Language="C#" Value="public interface SelectableSource : SemWeb.StatementSource" />
  <AssemblyInfo>
    <AssemblyName>SemWeb</AssemblyName>
    <AssemblyVersion>0.5.0.2</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>SemWeb.StatementSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Members>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (SemWeb.Statement template);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="template" Type="SemWeb.Statement" />
      </Parameters>
      <Docs>
        <param name="template">The statement to search for, or a statement template.</param>
        <summary>Returns whether the store contains a statement, or any
statement that matches the template.</summary>
        <returns>
          <see langword="true" /> if the store contains the statement or
any statement matching the template.</returns>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select (SemWeb.Statement template, SemWeb.StatementSink sink);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="template" Type="SemWeb.Statement" />
        <Parameter Name="sink" Type="SemWeb.StatementSink" />
      </Parameters>
      <Docs>
        <param name="template">A statement template.  Use <see cref="F:SemWeb.Statement.All" /> to select all statements in the store, or a statement with <see langword="null" /> fields to select statements that match the non-<see langword="null" /> parts of the statement.</param>
        <param name="sink">A StatementSink to which each matching statement will be added.</param>
        <summary>Queries the story for matching statements, and writes the statements to a <see cref="T:SemWeb.StatementSink" />.</summary>
        <remarks>
          <para>Each statement in the store matching <paramref name="template" /> is added to <paramref name="sink" /> with a call to <see cref="M:SemWeb.StatementSink.Add(SemWeb.Statement)" />.  If the call to Add returns <see langword="false" />, the select operation is aborted and returns immediately.</para>
          <para>
            <paramref name="template" /> is a statement template, which means any field in <paramref name="template" /> may be <see langword="null" />, and those fields are excluded from the statement filter. For example, setting the Subject and Predicate fields but leaving the Object and Meta fields <see langword="null" /> will match all statements in the store that have the given Subject and Predicate, and anything in their Object and Meta fields.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select (SemWeb.Entity[] subjects, SemWeb.Entity[] predicates, SemWeb.Resource[] objects, SemWeb.Entity[] metas, SemWeb.StatementSink sink);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subjects" Type="SemWeb.Entity[]" />
        <Parameter Name="predicates" Type="SemWeb.Entity[]" />
        <Parameter Name="objects" Type="SemWeb.Resource[]" />
        <Parameter Name="metas" Type="SemWeb.Entity[]" />
        <Parameter Name="sink" Type="SemWeb.StatementSink" />
      </Parameters>
      <Docs>
        <param name="subjects">An array of entities for matching subjects, or <see langword="null" /> if any subject matches.</param>
        <param name="predicates">An array of entities for matching predicates, or <see langword="null" /> if any predicate matches.</param>
        <param name="objects">An array of resources for matching objects, or <see langword="null" /> if any object matches.</param>
        <param name="metas">An array of entities for matching meta fields, or <see langword="null" /> if any meta field matches.</param>
        <param name="sink">A StatementSink to which each matching statement will be added.</param>
        <summary>Queries the store for matching statements, and writes the statements to a <see cref="T:SemWeb.StatementSink" />.</summary>
        <remarks>
          <para>Each statement in the store matching the parameters is added to <paramref name="sink" /> with a call to <see cref="M:SemWeb.StatementSink.Add(SemWeb.Statement)" />.  If the call to Add returns <see langword="false" />, the select operation is aborted and returns immediately.</para>
          <para>None of the argument arrays may be zero-length or contain <see langword="null" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select (SemWeb.Entity[] subjects, SemWeb.Entity[] predicates, SemWeb.Entity[] metas, SemWeb.StatementSink sink, SemWeb.LiteralFilter[] literalFilters);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subjects" Type="SemWeb.Entity[]" />
        <Parameter Name="predicates" Type="SemWeb.Entity[]" />
        <Parameter Name="metas" Type="SemWeb.Entity[]" />
        <Parameter Name="sink" Type="SemWeb.StatementSink" />
        <Parameter Name="literalFilters" Type="SemWeb.LiteralFilter[]" />
      </Parameters>
      <Docs>
        <param name="subjects">An array of entities for matching subjects, or <see langword="null" /> if any subject matches.</param>
        <param name="predicates">An array of entities for matching predicates, or <see langword="null" /> if any predicate matches.</param>
        <param name="metas">An array of entities for matching meta fields, or <see langword="null" /> if any meta field matches.</param>
        <param name="sink">A sink to which each matching statement is written.</param>
        <param name="literalFilters">An array of literal filter objects.</param>
        <summary>Queries the store for matching statements with literal objects that match filters, and writes the statements to a <see cref="T:SemWeb.StatementSink" />.</summary>
        <remarks>
          <para>**This operation is not fully implemented in all data sources yet.**</para>
          <para>Each statement in the data source matching the parameters is added to <paramref name="result" /> with a call to <see cref="M:SemWeb.StatementSink.Add(SemWeb.Statement)" />.  If the call to Add returns <see langword="false" />, the select operation is aborted and returns immediately.</para>
          <para>None of the argument arrays may be zero-length or contain <see langword="null" />.</para>
          <para>Only statements with <see cref="T:SemWeb.Literal" /> objects will match, and the literal
		  value must match all of the provided filters.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindEntities">
      <MemberSignature Language="C#" Value="public SemWeb.Entity[] FindEntities (SemWeb.Statement[] graph);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Entity[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graph" Type="SemWeb.Statement[]" />
      </Parameters>
      <Docs>
        <param name="graph">A graph.  Each statement in the graph must contain at least one <see langword="null" /> field which represents the single variable in the query.</param>
        <summary>Finds all entities that can substitute into a graph.</summary>
        <returns>An array of entities that match the variable in the query graph.</returns>
        <remarks>Implementors of SelectableSource can use <see cref="M:SemWeb.Store.DefaultFindEntities(SemWeb.Statement[])"/> as a default, unoptimized implementation.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>An interface implemented by RDF sources that supports Select operations.</summary>
    <remarks>Classes that implement this interface support the <see cref="M:SemWeb.SelectableSource.Contains(SemWeb.Statement)" /> which returns whether any statement matches the given statement template, and <see cref="M:SemWeb.SelectableSource.Select(SemWeb.Statement,SemWeb.StatementSink)" /> and <see cref="M:SemWeb.SelectableSource.Select(SemWeb.Statement[],SemWeb.StatementSink)" /> which searches for statements matching the given template(s).</remarks>
  </Docs>
</Type>
