<Type Name="Resource" FullName="SemWeb.Resource">
  <TypeSignature Language="C#" Value="public abstract class Resource : IComparable, IComparable&lt;SemWeb.Resource&gt;" />
  <AssemblyInfo>
    <AssemblyName>SemWeb</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.2</AssemblyVersion>
    <AssemblyVersion>1.0.7.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;SemWeb.Resource&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>The base class of <see cref="T:SemWeb.Entity" />, <see cref="T:SemWeb.BNode" />, <see cref="T:SemWeb.Literal" />, and <see cref="T:SemWeb.Variable" />, the nodes in an RDF graph.</summary>
    <remarks>
      <para>There are two types of resources in the RDF world: entities and literals.  Entities are nodes in the graph.  They can be either named (i.e. they have a URI) or unnamed (i.e. they are anonymous, or "blank").  All of these things are represented by the <see cref="T:SemWeb.Entity" /> class, which is a subclass of <see cref="T:SemWeb.Resource" />.  However, unnamed "blank" nodes are represented by a special subclass of Entity, the <see cref="T:SemWeb.BNode" /> class.  So, when you want to create a named node, use <c>new Entity(uri)</c>, but when you want to create a new blank node, use <c>new BNode()</c>.  Never say <c>new Entity(null)</c>.</para>
      <para>Literals, which are textual strings, are represented by the <see cref="T:SemWeb.Literal" /> class.  In RDF, literals can only be the objects of statements.  Use the <c>Value</c> property of a literal to get back its string value.</para>
      <para>There is a special type of blank node in this library for variables used in queries and inferencing.  These are represented by the <see cref="T:SemWeb.Variable" /> class, which inherits from the <see cref="T:SemWeb.BNode" /> class. The <see cref="T:SemWeb.N3Reader" /> will read <c>?variable</c> resources as <see cref="T:SemWeb.Variable" />s.  The name of the variable will be put in its <see cref="P:SemWeb.BNode.LocalName" /> property.</para>
      <para>The == and != operators have been overloaded for Resources.  Two resources are equal if they are both <see cref="T:SemWeb.Entity" /> objects and the <see cref="T:SemWeb.Entity" /> overloaded == operator returns true, or if they are both <see cref="T:SemWeb.Literal" /> objects with equal values for Value, Language, and DataType.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (SemWeb.Resource other);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="SemWeb.Resource" />
      </Parameters>
      <Docs>
        <param name="other">The other resource.</param>
        <summary>Compares two resources.</summary>
        <returns>0 if the resources are equal, -1 if this resource should be ordered before <paramref name="other" />, or 1 if <paramref name="other" /> should be ordered first.</returns>
        <remarks>The ordering used by this method is as follows: Entities sorted by URI, then BNodes sorted by HashCode, and finally Literals sorted by their Value.</remarks>
      </Docs>
      <ImplementsInterfaceMethods>
        <InterfaceImpl Type="System.IComparable&lt;SemWeb.Resource&gt;" Member="CompareTo" cref="M:System.IComparable`1.CompareTo(SemWeb.Resource)" />
      </ImplementsInterfaceMethods>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.6.2</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResourceKey">
      <MemberSignature Language="C#" Value="public object GetResourceKey (object key);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.6.2</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (SemWeb.Resource a, SemWeb.Resource b);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="SemWeb.Resource" />
        <Parameter Name="b" Type="SemWeb.Resource" />
      </Parameters>
      <Docs>
        <param name="a">A Resource.</param>
        <param name="b">A Resource.</param>
        <summary>Tests two Resources for equality.</summary>
        <returns>Returns whether the two resources are equal.
        If both arguments are <see langword="null" />, returns true;
        otherwise, if one argument is <see langword="null" />, returns false.</returns>
        <remarks>Two resources are equal if they are both entities
        and either 1) are the same object, 2) have the same URI, or
        3) are <see cref="T:SemWeb.BNode" />s created by the same Store and marked
        as representing the same entity; or if they are Literals, if
        they have the same value, language, and datatype.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.6.2</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (SemWeb.Resource a, SemWeb.Resource b);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="SemWeb.Resource" />
        <Parameter Name="b" Type="SemWeb.Resource" />
      </Parameters>
      <Docs>
        <param name="a">A Resource.</param>
        <param name="b">A Resource.</param>
        <summary>Tests two Resources for inequality.</summary>
        <returns>The negation of a == b.</returns>
        <remarks>See the Resource equality operator.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.6.2</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="SetResourceKey">
      <MemberSignature Language="C#" Value="public void SetResourceKey (object key, object value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">To be added; from: <see cref="M:SemWeb.Resource.SetResourceKey(System.Object,System.Object)" /></exception>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.6.2</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object other);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">A resource to be compared with.</param>
        <summary>This implements the .NET 1.0 IComparable interface method to compare two Resources. The public method <see cref="M:SemWeb.Resource.CompareTo(SemWeb.Resource)" /> is also available, and in .NET 2.0 Resource additionally implements <see cref="T:System.IComparable&lt;SemWeb.Resource&gt;" />.</summary>
        <returns>The value that would be returned by calling <see cref="M:SemWeb.Resource.CompareTo(SemWeb.Resource)" />.</returns>
        <remarks>This method calls <see cref="M:SemWeb.Resource.CompareTo(SemWeb.Resource)" />. A InvalidCastException is thrown if <paramref name="other" /> is not an instance of <see cref="T:SemWeb.Resource" />.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.6.2</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Uri">
      <MemberSignature Language="C#" Value="public abstract string Uri { get; }" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The URI of this resource.</summary>
        <value>The URI of the resource, or <see langword="null" /> if the resource is a <see cref="T:SemWeb.BNode" /> or a <see cref="T:SemWeb.Literal" />.</value>
        <remarks>None.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.6.2</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
  </Members>
</Type>
