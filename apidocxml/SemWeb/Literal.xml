<Type Name="Literal" FullName="SemWeb.Literal">
  <TypeSignature Language="C#" Value="public sealed class Literal : SemWeb.Resource" />
  <AssemblyInfo>
    <AssemblyName>SemWeb</AssemblyName>
    <AssemblyVersion>0.7.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SemWeb.Resource</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Literal (string value);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The value of the Literal node.</param>
        <summary>Creates a new Literal with the given string value.</summary>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Literal (string value, string language, string dataType);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="language" Type="System.String" />
        <Parameter Name="dataType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The value of the Literal node.</param>
        <param name="language">A language identifier, or <see langword="null" /> to leave the language unspecified.</param>
        <param name="dataType">The URI that gives the datatype of the literal, or <see langword="null" /> to leave the specific datatype unspecified.</param>
        <summary>Creates a new Literal with the given value, language, and datatype.</summary>
        <remarks>A language and datatype cannot both be specified, following to the RDF standard.  An exception will be thrown if both are given.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The value of the literal.</summary>
        <value>The string value of the literal.</value>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public string Language { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The language of the literal.</summary>
        <value>The language identifier of the literal, or <see langword="null" />.</value>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The datatype URI of the literal.</summary>
        <value>The datatype URI of the literal, or <see langword="null" />.</value>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static SemWeb.Literal Parse (string literal, SemWeb.NamespaceManager namespaces);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Literal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="literal" Type="System.String" />
        <Parameter Name="namespaces" Type="SemWeb.NamespaceManager" />
      </Parameters>
      <Docs>
        <param name="literal">An N3-encoded form of a literal.</param>
        <param name="namespaces">A namespace manager used to resolve the literal's datatype, if present, or <see langword="null" />.</param>
        <summary>Parses a literal value.</summary>
        <returns>A Literal object.</returns>
        <remarks>
          <para>The encoded literal must be in the form of:   "value"[@langcode | ^^datatypeURI].</para>
          <para>If <paramref name="namespaces" /> is <see langword="null" /> and a datatype was provided as a QName, or if the QName prefix was not found in the namespace manager, an ArgumentException is thrown.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static SemWeb.Literal op_Explicit (string value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Literal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The string value to convert to a Literal object.</param>
        <summary>Converts a string to a Literal object
        whose language and datatype are <see langword="null" />.</summary>
        <returns>A literal object whose Value is the string,
        and whose language and datatype are null.</returns>
        <remarks>This is an explicit cast operator.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseValue">
      <MemberSignature Language="C#" Value="public object ParseValue ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a native .NET type for the literl value using a XSD DataType.</summary>
        <returns>A string, boolean, integer, or other value, as described below.</returns>
        <remarks>
          <para>If the DataType of the literal is not set, or if the DataType is not one of the following recognized types, the literal's string value is returned.</para>
          <para>The recognized types below are all in the <c>http://www.w3.org/2001/XMLSchema#</c> namespace.  That is, where it says "string" below, it means the DataType is <c>http://www.w3.org/2001/XMLSchema#string</c>.</para>
          <list type="table">
            <listheader>
              <term>DataType(s)</term>
              <description>Return Value</description>
            </listheader>
            <item>
              <term>string, normalizedString, anyURI</term>
              <description>The literal's value, as a <see cref="T:System.String" />.</description>
            </item>
            <item>
              <term>boolean</term>
              <description>A <see cref="T:System.Boolean" />, true if the literal's value is "true" or "1", false otherwise.</description>
            </item>
            <item>
              <term>decimal, integer, positiveInteger, nonPositiveInteger, negativeInteger, nonNegativeInteger</term>
              <description>The literal's value as a <see cref="T:System.Decimal" /> using <see cref="M:System.Decimal.Parse(string)" />.</description>
            </item>
            <item>
              <term>float or double</term>
              <description>The literal's value as a <see cref="T:System.Single" /> for float or <see cref="T:System.Double" /> for double, using the appropriate Parse method.</description>
            </item>
            <item>
              <term>duration</term>
              <description>The literal's value as a <see cref="T:System.TimeSpan" /> using <see cref="M:System.TimeSpan.Parse(string)" />.</description>
            </item>
            <item>
              <term>dateTime, time, date</term>
              <description>The literal's value as a <see cref="T:System.DateTime" /> using <see cref="M:System.DateTime.Parse(string)" />.</description>
            </item>
            <item>
              <term>long, int, short, byte</term>
              <description>The literal's value as a <see cref="T:System.Int64" />, <see cref="T:System.Int32" />, <see cref="T:System.Int16" />, or <see cref="T:System.SByte" /> using the appropriate Parse method.</description>
            </item>
            <item>
              <term>unsignedLong, unsignedInt, unsignedShort, unsignedByte</term>
              <description>The literal's value as a <see cref="T:System.UInt64" />, <see cref="T:System.UInt32" />, <see cref="T:System.UInt16" />, or <see cref="T:System.Byte" /> using the appropriate Parse method.</description>
            </item>
          </list>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public SemWeb.Literal Normalize ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Literal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static SemWeb.Literal Create (bool value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Literal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>A literal (text string) node in an RDF graph.</summary>
    <remarks>
      <para>Literals are string values optionally tagged with a language or datatype URI.</para>
      <para>An explicit conversion operator is defined from strings to literals as a convenience.  The operator converts the string to a literal by returning a literal with that value, and <see langword="null" /> language and datatype.</para>
      <example>
        <para>The following examples create literal nodes.</para>
        <code lang="C#">Literal thing1 = new Literal("SemWeb: The C# Library");
Literal thing2 = (Literal)"SemWeb: The C# Library"; // explicit operator overload
Literal thing3 = new Literal("SemWeb: The C# Library", "en", null); // with language
Literal thing3 = new Literal("SemWeb: The C# Library", null, "http://www.w3.org/2001/XMLSchema#string"); // with datatype

Console.WriteLine(thing1.Value);
Console.WriteLine(thing2.Language);
Console.WriteLine(thing3.DataType);</code>
      </example>
    </remarks>
  </Docs>
</Type>
