<Type Name="MemoryStore" FullName="SemWeb.MemoryStore">
  <TypeSignature Language="C#" Value="public class MemoryStore : SemWeb.Store, System.Collections.Generic.IEnumerable&lt;SemWeb.Statement&gt;" />
  <AssemblyInfo>
    <AssemblyName>SemWeb</AssemblyName>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SemWeb.Store</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;SemWeb.Statement&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>A graph of statements held in memory.</summary>
    <remarks>
      <para>The MemoryStore is the main storage mechanism for small amounts of data.</para>
      <para>Although the MemoryStore inherits from Store, which can be used to group multiple data sources together, it is illegal to call AddSource on a MemoryStore.</para>
      <para>Here are some examples of using a MemoryStore:</para>
      <example>
        <code lang="C#">// Load data from mydata.rdf file
MemoryStore store = new MemoryStore(new RdfXmlReader("mydata.rdf"));

// Add some statements
store.Add(new Statement("http://www.mysite.com", "http://purl.org/dc/elements/1.1/title", (Literal)"My Web Site"));
store.Add(new Statement("http://www.mysite.com", "http://purl.org/dc/elements/1.1/description",
     (Literal)"My site is all about me."));

// You can also use Entity and Literal objects
Entity othersite = new Entity("http://www.anothersite.com");
Entity dctitle = new Entity("http://purl.org/dc/elements/1.1/title");
store.Add(new Statement(othersite, dctitle, new Literal("Create a literal object."));

// Get the statements back by looping through the store
foreach (Statement statement in store) {
    Console.WriteLine(statement);
}

// Or by streaming them to a StatementSink
using (StatementSink sink = new N3Writer(Console.Out))
    store.Write(sink);

// You can get statements back selectively by filtering.  This just gets
// statements about othersite.
using (StatementSink sink = new N3Writer(Console.Out))
    store.Select(new Statement(othersite, null, null), sink);

// And there are some utility functions like this:
foreach (Resource res in store.SelectObjects(othersite, dctitle)) {
    if (res is Literal) // might also be an Entity
        Console.WriteLine("Other site's title: " + ((Literal)res).Value);
}
  </code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryStore ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Creates a new empty MemoryStore.</summary>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryStore (SemWeb.Statement[] statements);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="statements" Type="SemWeb.Statement[]" />
      </Parameters>
      <Docs>
        <param name="statements">An array of statements.</param>
        <summary>Creates a MemoryStore initialized with the given array of statements.</summary>
        <remarks>The statements in the array are added to the MemoryStore on creation.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryStore (SemWeb.StatementSource source);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="source" Type="SemWeb.StatementSource" />
      </Parameters>
      <Docs>
        <param name="source">A StatementSource, the contents of which are read into the memory store.</param>
        <summary>Creates a new MemoryStore and reads the data from a StatementSource, which might be a <see cref="T:SemWeb.RdfReader" />, for instance.</summary>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public SemWeb.Statement this[int index] { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Statement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The 0-based index to a statement in the store.</param>
        <summary>Returns a statement in the store by index.</summary>
        <value>A <see cref="T:SemWeb.Statement" />.</value>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;SemWeb.Statement&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;SemWeb.Statement&gt; IEnumerable&lt;Statement&gt;.GetEnumerator ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;SemWeb.Statement&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public SemWeb.Statement[] ToArray ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Statement[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the contents of the store as an array of Statements.</summary>
        <returns>An array of Statements that make up the contents of the store.</returns>
        <remarks>None.</remarks>
      </Docs>
    </Member>
  </Members>
  <Attributes>
    <Attribute>
      <AttributeName>System.Reflection.DefaultMember("Item")</AttributeName>
    </Attribute>
  </Attributes>
</Type>
