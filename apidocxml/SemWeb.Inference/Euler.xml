<Type Name="Euler" FullName="SemWeb.Inference.Euler">
  <TypeSignature Language="C#" Value="public class Euler : SemWeb.Inference.Reasoner" />
  <AssemblyInfo>
    <AssemblyName>SemWeb</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.0</AssemblyVersion>
    <AssemblyVersion>1.0.6.2</AssemblyVersion>
    <AssemblyVersion>1.0.7.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SemWeb.Inference.Reasoner</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Implements a backward-chaining reasoner with Euler path detection based on the Euler library by Jos de Roo.</summary>
    <remarks>
      <para>This class is based on the JavaScript version of the Euler library at http://www.agfa.com/w3c/euler/.</para>
      <para>This class is an instance of the <see cref="T:SemWeb.Inference.Reasoner" /> class. To use a Reasoner, you add it to a Store with <see cref="M:SemWeb.Store.AddReasoner(SemWeb.Inference.Reasoner)" />. Subsequently, calls to Select and Query on the Store will be processed by the reasoner, and so will provide the entailments given by the reasoner directly.</para>
      <para>The following example shows how to use this class to reason about transitive relations.</para>
      <example>
        <code lang="C#">
// This example demonstrates general reasoning with
// the Euler engine based on Jos De Roo's Euler proof
// mechanism.  The example is based on the "graph"
// example from Euler.

using System;
using System.IO;

using SemWeb;
using SemWeb.Inference;

public class EulerTest {

	public static void Main() {
		// Create the instance data
		
		MemoryStore dataModel = new MemoryStore();
		
		BNode paris = new BNode("paris");
		BNode orleans = new BNode("orleans");
		BNode chartres = new BNode("chartres");
		BNode amiens = new BNode("amiens");
		BNode blois = new BNode("blois");
		BNode bourges = new BNode("bourges");
		BNode tours = new BNode("tours");
		BNode lemans = new BNode("lemans");
		BNode angers = new BNode("angers");
		BNode nantes = new BNode("nantes");
	
		Entity oneway = new Entity("http://www.agfa.com/w3c/euler/graph.axiom#oneway");
		Entity path = new Entity("http://www.agfa.com/w3c/euler/graph.axiom#path");
		
		dataModel.Add(new Statement(paris, oneway, orleans));
		dataModel.Add(new Statement(paris, oneway, chartres));
		dataModel.Add(new Statement(paris, oneway, amiens));
		dataModel.Add(new Statement(orleans, oneway, blois));
		dataModel.Add(new Statement(orleans, oneway, bourges));
		dataModel.Add(new Statement(blois, oneway, tours));
		dataModel.Add(new Statement(chartres, oneway, lemans));
		dataModel.Add(new Statement(lemans, oneway, angers));
		dataModel.Add(new Statement(lemans, oneway, tours));
		dataModel.Add(new Statement(angers, oneway, nantes));
		
		// Create the inference rules by reading them from a N3 string.
		
		string rules =
			"@prefix : &lt;http://www.agfa.com/w3c/euler/graph.axiom#&gt;.\n" +
			"\n" +
			"{ ?a :oneway ?b } =&gt; { ?a :path ?b } .\n" +
			"{ ?a :path ?b . ?b :path ?c . } =&gt; { ?a :path ?c } .\n";
		
		// Create our question in the form of a statement to test.
		
		Statement question = new Statement(paris, path, nantes);
		
		// Create the Euler engine
		
		Euler engine = new Euler(new N3Reader(new StringReader(rules)));
		
		// First Method of Inference:
		// Ask the engine whether there is a path from paris to nantes.
		// The Prove method will return a list of proofs, or an empty
		// array if it could not find a proof.
		
		foreach (Proof p in engine.Prove(dataModel, new Statement[] { question })) {
			Console.WriteLine(p.ToString());
		}
		
		// Second Method of Inference:
		// Apply the engine to the data model and then use the data
		// model's Contains method to see if the statement is "in"
		// the model + reasoning.
		
		dataModel.AddReasoner(engine);
		
		Console.WriteLine("Euler Says the Question is: " + dataModel.Contains(question));
		
	}
}</code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Euler (SemWeb.StatementSource rules);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="rules" Type="SemWeb.StatementSource" />
      </Parameters>
      <Docs>
        <param name="rules">A source of inference statements.</param>
        <summary>Constructs a new Euler inference engine with the inference rules provided in the given statement stream.</summary>
        <remarks>The source of inference statements usually comes from an N3 file with rules of the form "{ . . . antecedent statements . . . } =&gt; { . . . consequent statements . . . }", with variables such as "?var1" used in both parts. The "=&gt;" predicate is shorthand for the URI http://www.w3.org/2000/10/swap/log#implies.</remarks>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.6.2</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Distinct">
      <MemberSignature Language="C#" Value="public override bool Distinct { get; }" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MetaQuery">
      <MemberSignature Language="C#" Value="public override SemWeb.Query.MetaQueryResult MetaQuery (SemWeb.Statement[] graph, SemWeb.Query.QueryOptions options, SemWeb.SelectableSource targetModel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SemWeb.Query.MetaQueryResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graph" Type="SemWeb.Statement[]" />
        <Parameter Name="options" Type="SemWeb.Query.QueryOptions" />
        <Parameter Name="targetModel" Type="SemWeb.SelectableSource" />
      </Parameters>
      <Docs>
        <param name="graph">To be added.</param>
        <param name="options">To be added.</param>
        <param name="targetModel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prove">
      <MemberSignature Language="C#" Value="public SemWeb.Inference.Proof[] Prove (SemWeb.SelectableSource world, SemWeb.Statement[] goal);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Inference.Proof[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="world" Type="SemWeb.SelectableSource" />
        <Parameter Name="goal" Type="SemWeb.Statement[]" />
      </Parameters>
      <Docs>
        <param name="world">To be added.</param>
        <param name="goal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Exception">To be added; from: <see cref="M:SemWeb.Inference.Euler.Prove(SemWeb.SelectableSource,SemWeb.Statement[])" /></exception>
      </Docs>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.6.2</AssemblyVersion>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public override void Query (SemWeb.Statement[] graph, SemWeb.Query.QueryOptions options, SemWeb.SelectableSource targetModel, SemWeb.Query.QueryResultSink sink);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graph" Type="SemWeb.Statement[]" />
        <Parameter Name="options" Type="SemWeb.Query.QueryOptions" />
        <Parameter Name="targetModel" Type="SemWeb.SelectableSource" />
        <Parameter Name="sink" Type="SemWeb.Query.QueryResultSink" />
      </Parameters>
      <Docs>
        <param name="graph">To be added.</param>
        <param name="options">To be added.</param>
        <param name="targetModel">To be added.</param>
        <param name="sink">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public override void Select (SemWeb.SelectFilter filter, SemWeb.SelectableSource targetModel, SemWeb.StatementSink sink);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.7.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="SemWeb.SelectFilter" />
        <Parameter Name="targetModel" Type="SemWeb.SelectableSource" />
        <Parameter Name="sink" Type="SemWeb.StatementSink" />
      </Parameters>
      <Docs>
        <param name="filter">To be added.</param>
        <param name="targetModel">To be added.</param>
        <param name="sink">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
