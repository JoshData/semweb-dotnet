<Type Name="StatementList" FullName="SemWeb.Util.StatementList">
  <TypeSignature Language="C#" Value="public class StatementList : System.Collections.ICollection" />
  <AssemblyInfo>
    <AssemblyName>SemWeb</AssemblyName>
    <AssemblyVersion>0.7.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Reflection.DefaultMember(MemberName="Item")</AttributeName>
    </Attribute>
  </Attributes>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StatementList ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Creates a new empty array of statements.</summary>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (SemWeb.Statement value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="SemWeb.Statement" />
      </Parameters>
      <Docs>
        <param name="value">The statement to add to the end of the array.</param>
        <summary>Adds a statement to the end of the array.</summary>
        <returns>The index of the newly added statement.</returns>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (SemWeb.Statement s);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="SemWeb.Statement" />
      </Parameters>
      <Docs>
        <param name="s">The statement to remove.</param>
        <summary>Removes a statement from the array.</summary>
        <remarks>The statement is removed by linearly searching for it in the array.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the array.</summary>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">The zero-based index at which to remove a statement.</param>
        <summary>Removes the statement at the given index.</summary>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reverses the array.</summary>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public SemWeb.Statement[] ToArray ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Statement[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array containing all of the statements in the list.</summary>
        <returns>An array of statements.</returns>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an enumerator over the statements in the array.</summary>
        <returns>An enumerator over the statements in the array.</returns>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array dest, int start);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">The destination array.</param>
        <param name="start">The starting index in the destination array.</param>
        <summary>Copies this array into another array.</summary>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of statements in the list.</summary>
        <value>The number of statements in the list.</value>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns null.</summary>
        <value>Null.</value>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns false.</summary>
        <value>False.</value>
        <remarks>None.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public SemWeb.Statement Item[int index] { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Statement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">A zero-based index.</param>
        <summary>Gets/sets the statement at the given index.</summary>
        <value>The statement at the given index.</value>
        <remarks>This property is the default indexer for the class.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static SemWeb.Statement[] op_Implicit (SemWeb.Util.StatementList list);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>SemWeb.Statement[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="SemWeb.Util.StatementList" />
      </Parameters>
      <Docs>
        <param name="list">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StatementList (SemWeb.Statement[] statements);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="statements" Type="SemWeb.Statement[]" />
      </Parameters>
      <Docs>
        <param name="statements">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>An expandable array of Statements.</summary>
    <remarks>This utility class is for manipulating an expandable array of <see cref="T:SemWeb.Statement" />s.</remarks>
  </Docs>
</Type>
