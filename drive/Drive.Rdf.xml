<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Drive</name>
    </assembly>
    <members>
        <member name="T:Drive.Rdf.InvalidRdfException">
            <summary>
            Represents an exception that is thrown when invalid RDF Syntax is encountered by the parser
            </summary>
        </member>
        <member name="M:Drive.Rdf.InvalidRdfException.#ctor">
            <summary>
            Initializes a new instance of the InvalidRdfException class with an empty message
            </summary>
        </member>
        <member name="M:Drive.Rdf.InvalidRdfException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidRdfException class with the given message
            </summary>
            <param name="message">A string describing a reason for the exception</param>
        </member>
        <member name="P:Drive.Rdf.InvalidRdfException.Message">
            <summary>
            Gets a message describing the exeption or an empty string
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfAlt">
            <summary>
            Represents an RDF Collection of type rdf:Alt
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfContainer">
            <summary>
            Represents an RDF Collection
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfNode">
            <summary>
            Represents a Node in the RDF Graph
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfNode.AttachChildEdge(Drive.Rdf.IRdfEdge)">
            <summary>
            When implemented by a class, attaches a child edge to this IRdfNode
            </summary>
            <param name="edge">The edge to attach</param>
        </member>
        <member name="M:Drive.Rdf.IRdfNode.AttachParentEdge(Drive.Rdf.IRdfEdge)">
            <summary>
            When implemented by a class, attaches a parent edge to this node
            </summary>
            <param name="edge">The edge to attach</param>
        </member>
        <member name="M:Drive.Rdf.IRdfNode.DetachChildEdge(Drive.Rdf.IRdfEdge)">
            <summary>
            When implemented by a class, detaches a child edge from this node
            </summary>
            <param name="edge">The edge to detach</param>
        </member>
        <member name="M:Drive.Rdf.IRdfNode.DetachParentEdge(Drive.Rdf.IRdfEdge)">
            <summary>
            When implemented by a class, detaches a parent edge from this node
            </summary>
            <param name="edge">The edge to detach</param>
        </member>
        <member name="M:Drive.Rdf.IRdfNode.ToNTriple">
            <summary>
            When implemented by a class, returns the N-Triple representation of this node
            </summary>
            <returns>A string containing the N-Triple representation of this node</returns>
        </member>
        <member name="P:Drive.Rdf.IRdfNode.ChildEdges">
            <summary>
            When implemented by a class, gets the Collection of child edges associated with this node
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfNode.ParentEdges">
            <summary>
            When implemented by a class, gets the collection of parent edges associated with this node
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfNode.ID">
            <summary>
            When implemented by a class, gets or sets the ID of this IRdfNode
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfNode.LangID">
            <summary>
            When implemented by a class, gets or sets the Language ID of this node
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfContainer.Type">
            <summary>
            The edge specifying the type of this collection
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfBag">
            <summary>
            Represents an RDF Collection of type rdf:Bag
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfEdge">
            <summary>
            Defines a generalized mechanism for processing edges in the RDF Graph
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfEdge.AttachChildNode(Drive.Rdf.IRdfNode)">
            <summary>
            When implemented by a class, attaches a Child Node to this IRdfEdge
            </summary>
            <param name="node">The IRdfNode to attach</param>
        </member>
        <member name="M:Drive.Rdf.IRdfEdge.AttachParentNode(Drive.Rdf.IRdfNode)">
            <summary>
            When implemented by a class, attaches a Parent Node to this IRdfEdge
            </summary>
            <param name="node">The IRdfNode to attach</param>
        </member>
        <member name="M:Drive.Rdf.IRdfEdge.DetachChildNode">
            <summary>
            When implemented by a class, detachs the Child Node of this IRdfEdge
            </summary>
            <returns>The removed IRdfNode</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfEdge.DetachParentNode">
            <summary>
            When implemented by a class, detaches the Parent Node of this IRdfEdge
            </summary>
            <returns>The removed IRdfNode</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfEdge.ToNTriple">
            <summary>
            When implemented by a class, returns the N-triple representation of this IRdfEdge
            </summary>
            <returns>A string containing the N-Triple representation of this IRdfEdge</returns>
        </member>
        <member name="P:Drive.Rdf.IRdfEdge.ChildNode">
            <summary>
            When implemented by a class, gets or sets the Child Node of this IRdfEdge
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfEdge.ParentNode">
            <summary>
            When implemented by a class, gets or sets the Parent Node of this IRdfEdge
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfEdge.ID">
            <summary>
            When implemented by a class, gets or sets the ID of this IRdfEdge
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfEdge.LangID">
            <summary>
            When implemented by a class, gets or sets the Language ID of this IRdfEdge
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfEdgeCollection">
            <summary>
            Represents a collection of objects that implement the IRdfEdge interface. 
            This collection maps edge IDs to objects that implement the IRdfEdgeList interface
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfEdgeCollection.Add(System.String,Drive.Rdf.IRdfEdge)">
            <summary>
            When implemented by a class, adds the specified edge to this collection
            </summary>
            <param name="edgeID">The ID of the edge</param>
            <param name="edge">The IRdfEdge object</param>
        </member>
        <member name="M:Drive.Rdf.IRdfEdgeCollection.Add(Drive.Rdf.IRdfEdge)">
            <summary>
            When implemented by a class, adds the specified edge to this collection
            </summary>
            <param name="edge">The IRdfEdge object</param>
        </member>
        <member name="M:Drive.Rdf.IRdfEdgeCollection.Contains(System.String)">
            <summary>
            When implemented by a class, determines whether the collection contains any edge with the specified ID
            </summary>
            <param name="edgeID">A string containing an ID</param>
            <returns>True if this collection contains any edge with the specified ID</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfEdgeCollection.Contains(Drive.Rdf.IRdfEdge)">
            <summary>
            When implemented by a class, determines whether the collection contains the specified IRdfEdge object
            </summary>
            <param name="edge">An object that implements the IRdfEdge interface</param>
            <returns>True if this collection contains the specified object</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfEdgeCollection.Remove(Drive.Rdf.IRdfEdge)">
            <summary>
            When implemented by a class, removes the specified IRdfEdge object
            </summary>
            <param name="edge">An object that implements the IRdfEdge interface</param>
        </member>
        <member name="M:Drive.Rdf.IRdfEdgeCollection.RemoveAll">
            <summary>
            When implemented by a class removes all the edges from this collection
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfEdgeCollection.GetEnumerator">
            <summary>
            When implemented by a class, gets an enumerator that can iterate through the collection
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfEdgeCollection.Item(System.Int32)">
            <summary>
            When implemented by a class, returns the IRdfEdge at the specified index
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfEdgeCollection.Item(System.String)">
            <summary>
            When implemented by a class, returns a list of edges in this collection with the specified ID
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfEdgeCollection.Item(System.String,System.Int32)">
            <summary>
            When implemented by a class, returns the IRdfEdge at the given index from the list of edges with the specified ID
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfEdgeCollection.Count">
            <summary>
            When implemented by a class, returns the total number of edges in this collection
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfEdgeList">
            <summary>
            Represents a collection of IRdfEdge objects
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfEdgeList.GetEnumerator">
            <summary>
            When implemented by a class, returns an enumerator that can iterate through the collection
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfEdgeList.Add(Drive.Rdf.IRdfEdge)">
            <summary>
            When implemented by a class, adds an IRdfEdge object to the collection
            </summary>
            <param name="edge">The IRdfEdge to add to the collection</param>
        </member>
        <member name="M:Drive.Rdf.IRdfEdgeList.Contains(Drive.Rdf.IRdfEdge)">
            <summary>
            When implemented by a class, determines whether the specified IRdfEdge is a member of this collection
            </summary>
            <param name="edge">An IRdfEdge</param>
            <returns>True if the specified edge belongs to the collection.</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfEdgeList.Remove(Drive.Rdf.IRdfEdge)">
            <summary>
            When implemented by a class, removes the specified IRdfEdge object from the collection
            </summary>
            <param name="edge">The edge to remove</param>
        </member>
        <member name="M:Drive.Rdf.IRdfEdgeList.RemoveAll">
            <summary>
            When implemented by a class removes all the edges from this collection
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfEdgeList.Count">
            <summary>
            When implemented by a class, gets the total number of members in this collection
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfEdgeList.Item(System.Int32)">
            <summary>
            When implemented by a class, gets the IRdfEdge at the specified index
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfGraph">
            <summary>
            Reprsents an RDF Graph comprising Nodes and Literals connected by Edges
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfGraph.AddEdge(Drive.Rdf.IRdfEdge)">
            <summary>
            When implemented by a class, adds an edge to the RdfGraph
            </summary>
            <param name="edge">An object that implements the IRdfEdge interface</param>
        </member>
        <member name="M:Drive.Rdf.IRdfGraph.AddNode(System.String)">
            <summary>
            When implemented by a class, adds a new node to the RdfGraph
            </summary>
            <param name="nodeUri">A string representing the Uri of the new node</param>
            <returns>The newly added node</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfGraph.AddNode(Drive.Rdf.IRdfNode)">
            <summary>
            When implemented by a class, adds a new node to the RdfGraph 
            </summary>
            <param name="node">The IRdfNode to add</param>
        </member>
        <member name="M:Drive.Rdf.IRdfGraph.AddLiteral(System.String)">
            <summary>
            When implemented by a class, adds a new literal to the RdfGraph
            </summary>
            <param name="literalValue">A string representing the value of the new literal</param>
            <returns>The newly added IRdfLiteral</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfGraph.AddLiteral(System.String,System.String,System.String)">
            <summary>
            When implemented by a class, adds a new literal to the RdfGraph
            </summary>
            <param name="datatypeUri">A string representing the URI that specifies the datatype of the new literal</param>
            <param name="langID">A string representing the Language ID of the new Literal</param>
            <param name="literalValue">A string representing the value of the new Literal</param>
            <returns>The newly added IRdfLiteral</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfGraph.AddLiteral(Drive.Rdf.IRdfLiteral)">
            <summary>
            When implemented by a class, adds a new literal to the RdfGraph
            </summary>
            <param name="literal">The IRdfLiteral to add</param>
        </member>
        <member name="M:Drive.Rdf.IRdfGraph.GetNTriples">
            <summary>
            When implemented by a class, gets a collection of NTriples.
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfGraph.NameSpaces">
            <summary>
            When implemented by a class, gets the namespaces associated with this RDF Graph
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfGraph.Nodes">
            <summary>
            When implemented by a class, gets the collection of Nodes in this Graph
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfGraph.Literals">
            <summary>
            When implemented by a class, gets the collection of Literals in this Graph
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfGraph.Count">
            <summary>
            When implemented by a class, gets the number of nodes in this RDF Graph
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfGraph.Edges">
            <summary>
            When implementsd by a class, gets a collection of edges in this RdfGraph
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfGraph.Item(System.String)">
            <summary>
            When implemented by a class, gets the node with the specified ID from this graph
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfLiteral">
            <summary>
            Represents a Literal in an RDF Graph
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfLiteral.Datatype">
            <summary>
            When implemented by a class, gets or sets the URI specifying the datatype of this IRdfLiteral
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfLiteral.Value">
            <summary>
            When implemented by a class, gets or sets the value of this literal
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfN3Parser">
            <summary>
            Represents an NTriple parser
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfParser">
            <summary>
            Represents an RDF Parser
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfParser.ParseRdf(System.String,Drive.Rdf.IRdfGraph)">
            <summary>
            When implemented by a class, parses the RDF at the given URI, into an existing graph
            </summary>
            <param name="uri">The Uri of the document to parse</param>
            <param name="graph">An object that implements the IRdfGraph interface that will be used as the destination graph</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfParser.ParseRdf(System.String)">
            <summary>
            When implemented by a class, parses the RDF at the given URI
            </summary>
            <param name="uri">The Uri of the document to parse</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfParser.ParseRdf(System.Uri,Drive.Rdf.IRdfGraph)">
            <summary>
            When implemented by a class, parses the RDF at the given URI, into an existing graph
            </summary>
            <param name="uri">The Uri of the document to parse</param>
            <param name="graph">An object that implements the IRdfGraph interface that will be used as the destination graph</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfParser.ParseRdf(System.Uri)">
            <summary>
            When implemented by a class, parses the RDF at the given URI
            </summary>
            <param name="uri">The Uri of the document to parse</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfParser.ParseRdf(System.IO.Stream,Drive.Rdf.IRdfGraph)">
            <summary>
            When implemented by a class, parses the RDF from a stream into an existing Graph
            </summary>
            <param name="inStream">The input stream for data</param>
            <param name="graph">An object that implements the IRdfGraph interface that will be used as the destination graph</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfParser.ParseRdf(System.IO.Stream)">
            <summary>
            When implemented by a class, parses the RDF from a stream
            </summary>
            <param name="inStream">The input stream for data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="P:Drive.Rdf.IRdfParser.StopOnErrors">
            <summary>
            Indicates whether the parser should throw an exception and stop when it encounters an error
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfParser.StopOnWarnings">
            <summary>
            Indicates whether the parser should throw an exception and stop when it encounters a warning
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfParser.Warnings">
            <summary>
            Represents a list of warning messages generated by the parser
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfParser.Errors">
            <summary>
            Represents a list of error messages generated by the parser
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfN3Parser.NTriples">
            <summary>
            A collection of NTRiples obtained as a result of parsing a document 
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfNamespaceCollection">
            <summary>
            Represents a collection of Namespaces
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfNamespaceCollection.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through this collection.
            </summary>
            <returns>An object that implements that implements the <see cref="T:System.Collections.IEnumerator"/> interface.</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfNamespaceCollection.Remove(System.String)">
            <summary>
            Removes a namespace from this collection
            </summary>
            <param name="name">The name of the namespace to remove</param>
        </member>
        <member name="M:Drive.Rdf.IRdfNamespaceCollection.RemoveAll">
            <summary>
            When implemented by a class removes all the namespaces from this collection
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfNamespaceCollection.Item(System.String)">
            <summary>
            When implemented by a class, gets or sets the namespace with the specified name
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfNamespaceCollection.Count">
            <summary>
            Gets the total number of namespaces in this collection.
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfNodeCollection">
            <summary>
            Represents a collection of IRdfNode objects
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfNodeCollection.GetEnumerator">
            <summary>
            When implemented by a class, gets an enumerator that can iterate through the collection
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfNodeCollection.Add(System.String,Drive.Rdf.IRdfNode)">
            <summary>
            When implemented by a class, adds a new node to the collection
            </summary>
            <param name="nodeID">A string containing the ID of the new node</param>
            <param name="newNode">The new node to add</param>
        </member>
        <member name="M:Drive.Rdf.IRdfNodeCollection.Add(Drive.Rdf.IRdfNode)">
            <summary>
            When implemented by a class, adds a new node to the collection
            </summary>
            <param name="newNode">The new node to add</param>
        </member>
        <member name="M:Drive.Rdf.IRdfNodeCollection.Remove(Drive.Rdf.IRdfNode)">
            <summary>
            When implemented by a class, removes a node from the collection
            </summary>
            <param name="node"></param>
            <returns>True if the node was found and removed</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfNodeCollection.RemoveAll">
            <summary>
            When implemented by a class removes all the nodes from this collection
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfNodeCollection.Contains(Drive.Rdf.IRdfNode)">
            <summary>
            When implemented by a class, determines whether the specified node exists in the collection
            </summary>
            <param name="node">An IRdfNode</param>
            <returns>True if the specified node was found in the collection</returns>
        </member>
        <member name="P:Drive.Rdf.IRdfNodeCollection.Count">
            <summary>
            When implemented by a class, gets the total number of IRdfNodes in this collection
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfNodeCollection.Item(System.String)">
            <summary>
            When implemented by a class, gets or sets the node with the given ID
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfNTriple">
            <summary>
            Represents an RDF NTriple
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfNTriple.Subject">
            <summary>
            Represents the subject of the N-Triple
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfNTriple.Predicate">
            <summary>
            Represents the predicate of the N-Triple
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfNTriple.Object">
            <summary>
            Represents the object of the N-Triple
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfNTripleCollection">
            <summary>
            Represents a collection of N-Triples
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfNTripleCollection.Add(Drive.Rdf.IRdfNTriple)">
            <summary>
            When implemented by a class, adds a triple to this collection
            </summary>
            <param name="triple">An object that implements the IRdfNTriple interface</param>
        </member>
        <member name="M:Drive.Rdf.IRdfNTripleCollection.Contains(Drive.Rdf.IRdfNTriple)">
            <summary>
            When implemented by a class, determines whether this collection contains the specified triple
            </summary>
            <param name="triple">An object that implements the IRdfNTriple interface</param>
            <returns>True if this collection contains the specified triple</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfNTripleCollection.Remove(Drive.Rdf.IRdfNTriple)">
            <summary>
            When implemented by a class, removes the specified triple from this collection
            </summary>
            <param name="triple">An object that implements the IRdfNTriple interface</param>
        </member>
        <member name="M:Drive.Rdf.IRdfNTripleCollection.RemoveAll">
            <summary>
            When implemented by a class removes all the triples from this collection
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfNTripleCollection.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through this collection.
            </summary>
            <returns>An object that implements that implements the <see cref="T:System.Collections.IEnumerator"/> interface.</returns>
        </member>
        <member name="P:Drive.Rdf.IRdfNTripleCollection.Count">
            <summary>
            Gets the count of the triples in this collection
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfNTripleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the triple at the specified index
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfParserFactory">
            <summary>
            Represents a class that generates RDF Parser objects
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfParserFactory.GetRdfXmlParser">
            <summary>
            When implemented by a class, creates and returns an RDF/XML Parser
            </summary>
            <returns>An object that implements the IRdfParser interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfParserFactory.GetRdfN3Parser">
            <summary>
            When implemented by a class, creates and returns an RDF NTriples Parser
            </summary>
            <returns>An object that implements the IRdfParser interface</returns>
        </member>
        <member name="T:Drive.Rdf.IRdfSeq">
            <summary>
            Represents an RDF Collection of type rdf:Seq
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfStatement">
            <summary>
            Represents a Reified Statement in the RDF Graph
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfStatement.Type">
            <summary>
            When implemented by a class, gets or sets the type node of this statement
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfStatement.RdfSubject">
            <summary>
            When implemented by a class, gets or sets the subject of this statement
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfStatement.RdfPredicate">
            <summary>
            When implemented by a class, gets or sets the predicate of this statement
            </summary>
        </member>
        <member name="P:Drive.Rdf.IRdfStatement.RdfObject">
            <summary>
            When implemented by a class, gets or sets the object of this statement
            </summary>
        </member>
        <member name="T:Drive.Rdf.IRdfXmlParser">
            <summary>
            Represents an RDF/XML parser
            </summary>
        </member>
        <member name="M:Drive.Rdf.IRdfXmlParser.ParseRdf(System.IO.TextReader,Drive.Rdf.IRdfGraph,System.String)">
            <summary>
            When implemented by a class, parses the RDF from the given TextReader, into an existing graph using the given xml:base uri
            </summary>
            <param name="txtReader">The TextReader to use as the source of the XML data</param>
            <param name="graph">An object that implements the IRdfGraph interface</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data or the graph</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfXmlParser.ParseRdf(System.IO.TextReader,System.String)">
            <summary>
            When implemented by a class, parses the RDF from the given TextReader, using the given xml:base uri
            </summary>
            <param name="txtReader">The TextReader to use as the source of the XML data</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfXmlParser.ParseRdf(System.IO.TextReader,Drive.Rdf.IRdfGraph)">
            <summary>
            When implemented by a class, parses the RDF from the given TextReader, into an existing graph
            </summary>
            <param name="txtReader">The TextReader to use as the source of the XML data</param>
            <param name="graph">An object that implements the IRdfGraph interface</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfXmlParser.ParseRdf(System.IO.TextReader)">
            <summary>
            When implemented by a class, parses the RDF from the given TextReader
            </summary>
            <param name="txtReader">The TextReader to use as the source of the XML data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfXmlParser.ParseRdf(System.Xml.XmlReader,Drive.Rdf.IRdfGraph,System.String)">
            <summary>
            When implemented by a class, parses the RDF from the given XmlReader, into an existing graph using the given xml:base uri
            </summary>
            <param name="reader">The XmlReader to use as the source of the XML data</param>
            <param name="graph">An object that implements the IRdfGraph interface</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data or the graph</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfXmlParser.ParseRdf(System.Xml.XmlReader,System.String)">
            <summary>
            When implemented by a class, parses the RDF from the given XmlReader, using the given xml:base uri
            </summary>
            <param name="reader">The XmlReader to use as the source of the XML data</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfXmlParser.ParseRdf(System.Xml.XmlReader,Drive.Rdf.IRdfGraph)">
            <summary>
            When implemented by a class, parses the RDF from the given XmlReader, into an existing graph
            </summary>
            <param name="reader">The XmlReader to use as the source of the XML data</param>
            <param name="graph">An object that implements the IRdfGraph interface</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfXmlParser.ParseRdf(System.Xml.XmlReader)">
            <summary>
            When implemented by a class, parses the RDF from the given XmlReader
            </summary>
            <param name="reader">The XmlReader to use as the source of the XML data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfXmlParser.ParseRdf(System.Xml.XmlDocument,Drive.Rdf.IRdfGraph,System.String)">
            <summary>
            When implemented by a class, parses the RDF from the given XmlDocument, into an existing graph using the given xml:base uri
            </summary>
            <param name="doc">The XmlDocument to use as the source of the XML data</param>
            <param name="graph">An object that implements the IRdfGraph interface</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data or the graph</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfXmlParser.ParseRdf(System.Xml.XmlDocument,System.String)">
            <summary>
            When implemented by a class, parses the RDF from the given XmlDocument, using the given xml:base uri
            </summary>
            <param name="doc">The XmlDocument to use as the source of the XML data</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfXmlParser.ParseRdf(System.Xml.XmlDocument,Drive.Rdf.IRdfGraph)">
            <summary>
            When implemented by a class, parses the RDF from the given XmlDocument, into an existing graph
            </summary>
            <param name="doc">The XmlDocument to use as the source of the XML data</param>
            <param name="graph">An object that implements the IRdfGraph interface</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfXmlParser.ParseRdf(System.Xml.XmlDocument)">
            <summary>
            When implemented by a class, parses the RDF from the given XmlDocument
            </summary>
            <param name="doc">The XmlDocument to use as the source of the XML data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfXmlParser.ParseRdf(System.IO.Stream,Drive.Rdf.IRdfGraph,System.String)">
            <summary>
            When implemented by a class, parses the RDF from the given stream, into an existing graph using the given xml:base uri
            </summary>
            <param name="inStream">The Stream to use as the source of the XML data</param>
            <param name="graph">An object that implements the IRdfGraph interface</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data or the graph</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.IRdfXmlParser.ParseRdf(System.IO.Stream,System.String)">
            <summary>
            When implemented by a class, parses the RDF from the given stream, using the given xml:base uri
            </summary>
            <param name="inStream">The Stream to use as the source of the XML data</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="T:Drive.Rdf.RdfAlt">
            <summary>
            Represents an RDF Container of type rdf:Alt
            </summary>
        </member>
        <member name="T:Drive.Rdf.RdfContainer">
            <summary>
            Represents an RDF Container
            </summary>
        </member>
        <member name="T:Drive.Rdf.RdfNode">
            <summary>
            Represents a node in the RDF Graph
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfNode._nodeID">
            <summary>
            The URI of the node.
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfNode._parentEdges">
            <summary>
            The collection of parent edges associated with this node
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfNode._childEdges">
            <summary>
            The collection of child edges associated with this node
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfNode._langID">
            <summary>
            The language identifier for this node.
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfNode.AttachChildEdge(Drive.Rdf.IRdfEdge)">
            <summary>
            Attaches a child edge to this node.
            </summary>
            <param name="edge">An object that implements the IRdfEdge interface. This is the new edge to attach.</param>
            <exception cref="T:System.ArgumentNullException">The specified edge is a null reference.</exception>
        </member>
        <member name="M:Drive.Rdf.RdfNode.DetachChildEdge(Drive.Rdf.IRdfEdge)">
            <summary>
            Detaches a child edge from this node.
            </summary>
            <param name="edge">An object that implements the IRdfEdge interface.</param>
            <exception cref="T:System.ArgumentNullException">The specified edge is a null reference.</exception>
        </member>
        <member name="M:Drive.Rdf.RdfNode.AttachParentEdge(Drive.Rdf.IRdfEdge)">
            <summary>
            Attaches a parent edge to this node.
            </summary>
            <param name="edge">An object that implements the IRdfEdge interface.</param>
            <exception cref="T:System.ArgumentNullException">The specified edge is a null reference.</exception>
        </member>
        <member name="M:Drive.Rdf.RdfNode.DetachParentEdge(Drive.Rdf.IRdfEdge)">
            <summary>
            Detaches a parent edge from this node.
            </summary>
            <param name="edge">An object that implements the IRdfNode interface.</param>
            <exception cref="T:System.ArgumentNullException">The specified edge is a null reference.</exception>
        </member>
        <member name="M:Drive.Rdf.RdfNode.#ctor">
            <summary>
            Initializes a new instance of the RdfNode class.
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RdfNode class with the specified URI.
            </summary>
            <param name="nodeUri">A string representing the URI of this node.</param>
            <exception cref="T:System.UriFormatException">The specified URI is a not a well formed URI.</exception>
        </member>
        <member name="M:Drive.Rdf.RdfNode.ToNTriple">
            <summary>
            Returns an N-Triple representation of this Node
            </summary>
            <returns>A string containing the N-Triple representation of this Node.</returns>
        </member>
        <member name="M:Drive.Rdf.RdfNode.ToString">
            <summary>
            Returns an string representation of this Node
            </summary>
            <returns>A string containing the string representation of this Node.</returns>
        </member>
        <member name="P:Drive.Rdf.RdfNode.ID">
            <summary>
            Gets or sets the ID of this node
            </summary>
            <exception cref="T:System.UriFormatException">Attempt to set the ID to a value that is not a well formed URI.</exception>
        </member>
        <member name="P:Drive.Rdf.RdfNode.ParentEdges">
            <summary>
            Gets the parent edges of this Node.
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfNode.ChildEdges">
            <summary>
            Gets the Child Edges of this node.
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfNode.LangID">
            <summary>
            Gets or stes the language identifier for this node.
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfContainer._typeEdge">
            <summary>
            The child edge that connects to a node specifying the type of the container
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfContainer.Type">
            <summary>
            Gets or sets the node that specifies the type of this container
            </summary>
            <exception cref="T:System.ArgumentNullException">The specified value id null.</exception>
        </member>
        <member name="M:Drive.Rdf.RdfAlt.#ctor">
            <summary>
            Initializes a new instance of the RdfAlt class
            </summary>
            <remarks>This constructor creates a new RdfNode with URI rdf:Alt and sets it as the child node of an edge with URI rdf:type</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfAlt.#ctor(System.String,Drive.Rdf.RdfNode)">
            <summary>
            Initializes a new instance of the RdfAlt class with the specified Uri and the Type
            </summary>
            <param name="nodeUri">A string specifying a Uri for this container</param>
            <param name="typeNode">The RdfNode object to attach the edge specifying the type of container.</param>
            <exception cref="T:System.ArgumentNullException">typeNode is a null reference</exception>
            <remarks>Since this is a container of type rdf:Alt, the specified typeNode  is usually a node with ID rdf:Alt.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfAlt.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RdfAlt Class with the given URI
            </summary>
            <param name="nodeUri">A string representing the Uri of the Container</param>
            <remarks>This constructor creates a new RdfNode with Uri rdf:Alt and sets it as the child node of an edge with Uri rdf:type</remarks>
        </member>
        <member name="T:Drive.Rdf.RdfBag">
            <summary>
            Represents an RDF container of type rdf:Bag
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfBag.#ctor">
            <summary>
            Initializes a new instance of the RdfBag class
            </summary>
            <remarks>This constructor creates a new RdfNode with Uri rdf:Bag and sets it as the child node of an edge with URI rdf:type</remarks>	
        </member>
        <member name="M:Drive.Rdf.RdfBag.#ctor(System.String,Drive.Rdf.RdfNode)">
            <summary>
            Initializes a new instance of the RdfBag class with the given Uri and TypeNode
            </summary>
            <param name="nodeUri">A string representing the Uri of this Container</param>
            <param name="typeNode">The RdfNode object to attach to the edge specifying the type. This is usually a node with ID rdf:Bag.</param>
            <exception cref="T:System.ArgumentNullException">typeNode is a null reference</exception>
        </member>
        <member name="M:Drive.Rdf.RdfBag.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RdfBag class with the given Uri
            </summary>
            <param name="nodeUri">A string representing the URI of this Container</param>
            <remarks>This constructor creates a new RdfNode with URI rdf:Bag and sets it as the child node of an edge with URI rdf:type</remarks>	
        </member>
        <member name="T:Drive.Rdf.RdfEdge">
            <summary>
            Represents an Edge in the RDF Graph
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfEdge._parentNode">
            <summary>
            The parent node of this edge
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfEdge._childNode">
            <summary>
            The child node of this edge
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfEdge._edgeID">
            <summary>
            The URI of this edge
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfEdge._langID">
            <summary>
            The language ID of this edge
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfEdge.AttachChildNode(Drive.Rdf.IRdfNode)">
            <summary>
            Attaches a Child node to this edge
            </summary>
            <param name="node">The node to attach</param>
            <exception cref="T:System.ArgumentNullException">The specified node is a null reference</exception>
        </member>
        <member name="M:Drive.Rdf.RdfEdge.DetachChildNode">
            <summary>
            Detaches the child node
            </summary>
            <returns>The newly detached child node. Returns null if no child node was present</returns>
        </member>
        <member name="M:Drive.Rdf.RdfEdge.AttachParentNode(Drive.Rdf.IRdfNode)">
            <summary>
            Attaches a parent node to this edge
            </summary>
            <param name="node">The node to attach</param>
            <exception cref="T:System.ArgumentNullException">The specified nodenode is a null reference</exception>
        </member>
        <member name="M:Drive.Rdf.RdfEdge.DetachParentNode">
            <summary>
            Detaches the parent node from this edge
            </summary>
            <returns>The newly detached parent node. Returns null if no parent node was present</returns>
        </member>
        <member name="M:Drive.Rdf.RdfEdge.#ctor">
            <summary>
            Initializes a new instance of the RdfEdge class. Sets the ID, ChildNode and ParentNode properties to null
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfEdge.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RdfEdge class with the given URI
            </summary>
            <param name="edgeUri">A string representing the Uri of this edge. The ChildNode and ParentNode properties are set to null</param>
            <exception cref="T:System.UriFormatException">The specified edgeUri was not a well formed URI</exception>
        </member>
        <member name="M:Drive.Rdf.RdfEdge.ToNTriple">
            <summary>
            Converts this Edge to its NTriple representation
            </summary>
            <returns>A string with the N-Triple representing of this edge</returns>
        </member>
        <member name="P:Drive.Rdf.RdfEdge.ParentNode">
            <summary>
            Gets or sets the parent node of this edge
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfEdge.ChildNode">
            <summary>
            Gets or sets the child node of this edge
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfEdge.ID">
            <summary>
            Gets or sets the URI of this edge
            </summary>
            <exception cref="T:System.UriFormatException">The specified value is a null reference</exception>
        </member>
        <member name="P:Drive.Rdf.RdfEdge.LangID">
            <summary>
            Gets or sets the Language ID of this edge
            </summary>
            <remarks>This language ID is inherited by all child nodes and edges unless overridden</remarks>
        </member>
        <member name="T:Drive.Rdf.RdfEdgeCollection">
            <summary>
            Represents a collection of edges. This class maps edge IDs to lists of RdfEdge objects
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfEdgeCollection._edgeMap">
            <summary>
            The hashtable containing the map
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfEdgeCollection._edges">
            <summary>
            List of all the edges in this collection
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfEdgeCollection._edgeIndexMap">
            <summary>
            Map of Edge objects to an index into the list of edges
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfEdgeCollection.#ctor">
            <summary>
            Initializes a new instance of the RdfEdgeCollection class.
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfEdgeCollection.Add(Drive.Rdf.IRdfEdge)">
            <summary>
            Adds an edge to this collection
            </summary>
            <param name="edge">An object that implements the IRdfEdge interface</param>
            <exception cref="T:System.ArgumentNullException">The specified edge is a null reference</exception>
        </member>
        <member name="M:Drive.Rdf.RdfEdgeCollection.Add(System.String,Drive.Rdf.IRdfEdge)">
            <summary>
            Adds an edge to this collection
            </summary>
            <param name="edgeID">The ID of the edge</param>
            <param name="edge">An object that implements the IRdfEdge interface</param>
            <exception cref="T:System.ArgumentNullException">The specified edge is a null reference or the specified edgeID is a null reference</exception>
        </member>
        <member name="M:Drive.Rdf.RdfEdgeCollection.Remove(Drive.Rdf.IRdfEdge)">
            <summary>
            Removes the specified edge object if it exists.
            </summary>
            <param name="edge">An object that implements the IRdfEdge interface</param>
            <remarks>This method uses object.Equals to determine whether the specified edge exists and then removes it if it is present in the collection</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfEdgeCollection.Contains(System.String)">
            <summary>
            Determines whether this collection contains any edges with the specified edge ID
            </summary>
            <param name="edgeID">A string containing the edge ID</param>
            <returns>True if there are any edges in this collection with the specified ID</returns>
        </member>
        <member name="M:Drive.Rdf.RdfEdgeCollection.RemoveAll">
            <summary>
            Removes all the edges from this collection
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfEdgeCollection.Contains(Drive.Rdf.IRdfEdge)">
            <summary>
            Determines whether the specified edge object is present in this collection
            </summary>
            <param name="edge">An object that implements the IRdfEdge interface</param>
            <returns>True if this collection contains the specified edge object</returns>
            <remarks>This method uses object.Equals to determine whether the specified edge object exists in the collection</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfEdgeCollection.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through the collection
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfEdgeCollection.Item(System.String)">
            <summary>
            Returns a list of edges with the specified Edge ID
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfEdgeCollection.Item(System.String,System.Int32)">
            <summary>
            Returns the edge at the given index from the list of edges with the specified ID
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfEdgeCollection.Item(System.Int32)">
            <summary>
            Returns an edge at the given index
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfEdgeCollection.Count">
            <summary>
            Returns the total number of edges contained in this collection
            </summary>
        </member>
        <member name="T:Drive.Rdf.RdfEdgeList">
            <summary>
            Represents a collection of RdfEdge objects
            </summary>
            <remarks>This class implements the IRdfEdgeCollection interface.
            This collection has been implemented using an Arraylist and this enables the collection to have duplicate entries.
            This is required because a particular node in the RDF graph can have multiple child (or parent) edges that point to distinct nodes.</remarks>
        </member>
        <member name="F:Drive.Rdf.RdfEdgeList._edges">
            <summary>
            An arraylist of edges
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfEdgeList.Add(Drive.Rdf.IRdfEdge)">
            <summary>
            Adds an RdfEdge to this collection
            </summary>
            <param name="newEdge">The Edge to add.</param>
            <exception cref="T:System.ArgumentNullException">newEdge is a null reference.</exception>
        </member>
        <member name="M:Drive.Rdf.RdfEdgeList.Contains(Drive.Rdf.IRdfEdge)">
            <summary>
            Determines whether an edge is present in this collection
            </summary>
            <param name="edge">The Edge to locate in the collection</param>
            <returns>True if the Edge was found in the collection</returns>
            <remarks>This method is a wrapper around the ArrayList.Contains(object) method and thus is O(<i>n</i>) operation.
            Additionally ArrayList.Contains calls Object.equals to determine equality and so you cannot use this method to determine if an edge with the same edgeID is a member of this collection.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfEdgeList.Remove(Drive.Rdf.IRdfEdge)">
            <summary>
            Removes an edge object from the collection
            </summary>
            <param name="edge">The edge to remove</param>
            <returns>True if the edge was successfully removed</returns>
            <remarks>If the edge exists then it is removed by calling the ArrayList.Remove method which is an O(n) operation.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfEdgeList.RemoveAll">
            <summary>
            Removes all the edges from this collection
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfEdgeList.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through this collection
            </summary>
            <returns>An object that implements the IEnumerator interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfEdgeList.#ctor">
            <summary>
            Initializes a new instance of this collection
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfEdgeList.#ctor(Drive.Rdf.IRdfEdgeList)">
            <summary>
            Initializes a new instance of this collection from an existing one
            </summary>
            <param name="edges"></param>
        </member>
        <member name="P:Drive.Rdf.RdfEdgeList.Item(System.Int32)">
            <summary>
            Gets or sets the edge at the specified index
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfEdgeList.Count">
            <summary>
            Gets the number of edges stored in this collection
            </summary>
        </member>
        <member name="T:Drive.Rdf.RdfGraph">
            <summary>
            Represents an RDF Graph. 
            </summary>
            <remarks>This is an implementation of the IRdfGraph interface. This class maintain a collection of Nodes and a separate collection of Litrerals
            in order to allow distinguishing between Nodes and Literals with the same value.</remarks>
        </member>
        <member name="F:Drive.Rdf.RdfGraph._nameSpaces">
            <summary>
            The namespaces associated with this RDF Graph
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfGraph._edges">
            <summary>
            The collection of RdfEdges in this Graph
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfGraph._nodes">
            <summary>
            The collection of RdfNodes in this Graph
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfGraph._literals">
            <summary>
            The collection of literals in this RDF Graph
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfGraph.AddNode(System.String)">
            <summary>
            Adds a node to the Graph
            </summary>
            <param name="nodeUri">A string representing the URI of the new node.</param>
            <exception cref="T:System.UriFormatException">The specified nodeUri is not a well formed URI.</exception>
            <returns>An object that implements the IRdfNode interface. This is a reference to the new node added.
            This method checks the graph to determine whether the node with the specified URI exists. 
            If it does then a reference to the existing node is returned. If it does not exist then a new node is created, added 
            to the graph and returned.</returns>
        </member>
        <member name="M:Drive.Rdf.RdfGraph.AddNode(Drive.Rdf.IRdfNode)">
            <summary>
            Adds a new node to the graph.
            </summary>
            <param name="node">An object that implements the IRdfNode interface. This is the new node to add.</param>
            <exception cref="T:System.ArgumentException">A node with the same ID already exists in the Graph.</exception>
        </member>
        <member name="M:Drive.Rdf.RdfGraph.AddEdge(Drive.Rdf.IRdfEdge)">
            <summary>
            Adds an edge to the graph
            </summary>
            <param name="edge">An object that implements the IRdfEdge interface</param>
            <exception cref="T:System.ArgumentNullException">The specified edge object is a null reference</exception>
        </member>
        <member name="M:Drive.Rdf.RdfGraph.AddLiteral(System.String)">
            <summary>
            Adds a literal to the Graph
            </summary>
            <param name="literalValue">A string representing the value of the literal.</param>
            <returns>An object that implements the IRdfLiteral interface. This is a reference to the newly added literal.</returns>
            <remarks>This method looks in the graph to determine whether a literal with the specified value (and a null datatype and langID) exists
            in the Graph. If the literal exists a reference to the existing literal is returned. If it does not exist then a new literal (with the specified value, and null datatype and LangID)
            is created, added to the graph and returned.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfGraph.AddLiteral(System.String,System.String,System.String)">
            <summary>
            Adds a literal to the Graph
            </summary>
            <param name="literalValue">A string representing the value of the literal.</param>
            <param name="langID">A string representing the Language ID of the literal.</param>
            <param name="datatypeUri">A string representing the datatype URI of the literal.</param>
            <returns>An object that implements the IRdfLiteral interface. This is a reference to the newly added literal.</returns>
            <exception cref="T:System.UriFormatException">The specified datatype URI is not null and is not a well formed URI.</exception>
            <remarks>This method looks in the graph to determine whether a literal with the specified value, datatype and langID exists
            in the Graph. If the literal exists a reference to the existing literal is returned. If it does not exist then a new literal with the specified value, datatype and LangID
            is created, added to the graph and returned. Any parameter supplied to this method, except literalValue, can be null or empty and it will be ignored.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfGraph.AddLiteral(Drive.Rdf.IRdfLiteral)">
            <summary>
            Adds a literal to the graph
            </summary>
            <param name="literal">The new literal to add.</param>
            <exception cref="T:System.ArgumentException">A literal with the same value, datatype URI and language ID alreday exists in the graph.</exception>
        </member>
        <member name="M:Drive.Rdf.RdfGraph.Merge(Drive.Rdf.IRdfGraph,System.Boolean)">
            <summary>
            Merges the srcGraph into this graph object
            </summary>
            <param name="srcGraph">An object that implements the IRdfGraph interace</param>
            <param name="skipDuplicateEdges">A flag that indicates whether duplicate edges present in both graphs should be skipped during the merge process.</param>
        </member>
        <member name="M:Drive.Rdf.RdfGraph.GetNTriples">
            <summary>
            Gets a collection of N-Triples represented by this graph
            </summary>
            <returns>An object that implements the IRdfNTripleCollection interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfGraph.#ctor">
            <summary>
            Initializes a new instance of the RdfGraph class.
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfGraph.NameSpaces">
            <summary>
            Gets the namespaces associated with this RDF Graph
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfGraph.Edges">
            <summary>
            Gets the collection of RdfEdges in this Graph
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfGraph.Nodes">
            <summary>
            Gets the collection of RdfNodes in this Graph
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfGraph.Literals">
            <summary>
            Gets the collection of literals in this RDF Graph
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfGraph.Count">
            <summary>
            Gets the total number of nodes and literals in this RDF Graph
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfGraph.Item(System.String)">
            <summary>
            Gets the node (or literal) with the specified URI
            </summary>
            <remarks>This method looks for a node that matches the specified URI and returns it. 
            If the node is not found then the first literal matching this URI (value+langiuageID+datatype URI) is returned.
            If neither a node or a literal matching this ID is found then null is returned.</remarks>
        </member>
        <member name="T:Drive.Rdf.RdfLiteral">
            <summary>
            Represents a Literal in the RDF Graph.
            </summary>
            <remarks>A literal is uniquely identified by its value, LanguageID and Datatype URI. 
            The ID of a Literal is composed of a concatenated string of these three value. If the Datatype and Language ID are 
            not specified then they are assumed to be null (default for the locale or data) and the ID is set to the value.</remarks>
        </member>
        <member name="F:Drive.Rdf.RdfLiteral._dataType">
            <summary>
            The Datatype URI of this Literal
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfLiteral._literalValue">
            <summary>
            The value for this literal.
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfLiteral.#ctor">
            <summary>
            Initializes a new instance of the RdfLiteral class.
            </summary>
            <remarks>Sets the Datatype URI to null and the Value and the Language ID to empty strings.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfLiteral.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RdfLiteral class.
            </summary>
            <param name="literalValue">A string representing the value of this Literal.</param>
            <remarks>Sets the Datatype URI to null and the Labguage ID to an empty string.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfLiteral.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance if the RdfLiteral class.
            </summary>
            <param name="literalValue">A string representing the value of this literal.</param>
            <param name="languageID">A string representing the Language ID of this literal.</param>
            <param name="datatypeUri">A string representing the Datatype URI of this Literal.</param>
            <exception cref="T:System.UriFormatException">The specified datatypeUri is not null and is not a well formed URI.</exception>
        </member>
        <member name="M:Drive.Rdf.RdfLiteral.ToNTriple">
            <summary>
            Returns an N-Triple representation of this literal
            </summary>
            <returns>A string containing the N-Triple representation of this literal.</returns>
        </member>
        <member name="M:Drive.Rdf.RdfLiteral.ToString">
            <summary>
            Gets the string representation of this literal
            </summary>
            <returns>A string containg this literal</returns>
        </member>
        <member name="P:Drive.Rdf.RdfLiteral.Datatype">
            <summary>
            Gets or sets the Datatype URI of this Literal
            </summary>
            <exception cref="T:System.UriFormatException">Attempt to set the Datatype to a URI string that is not a well formed URI.</exception>
        </member>
        <member name="P:Drive.Rdf.RdfLiteral.Value">
            <summary>
            Gets or sets the value of this Literal.
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfLiteral.ID">
            <summary>
            Gets the ID of this literal
            </summary>
            <exception cref="T:System.ArgumentException">Attempt to set the ID of this literal.</exception>
            <remarks>This is a string composed of the Value, LanguageID and the Datatype URI.
            You cannot use this property to set the ID of a literal.</remarks>
        </member>
        <member name="T:Drive.Rdf.RdfN3Parser">
            <summary>
            Summary description for RdfN3Parser.
            </summary>
        </member>
        <member name="T:Drive.Rdf.RdfParser">
            <summary>
            Summary description for RdfParser.
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfParser._rdfGraph">
            <summary>
            The RDF Graph object
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfParser._warnings">
            <summary>
            List of warning messages generated while parsing the RDF/XML
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfParser._errors">
            <summary>
            List of error messages generated while parsing the RDF/XML
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfParser._stopOnErrors">
            <summary>
            Indicates whether the parser should throw an exception and stop when it encounters an error
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfParser._stopOnWarnings">
            <summary>
            Indicates whether the parser should throw an exception and stop when it generates a warnung
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfParser.OnError(System.String)">
            <summary>
            Called by the parser when an error is encountered.
            </summary>
            <param name="msg">The error message associated with the error</param>
            <exception cref="T:Drive.Rdf.InvalidRdfException">ExceptionsOnError is set to true</exception>
        </member>
        <member name="M:Drive.Rdf.RdfParser.OnError(System.Exception)">
            <summary>
            Called by the parser when an error is encountered.
            </summary>
            <param name="e">The exception to throw.</param>
            <remarks>If ExceptionsOnError is set to true then the specified Exception is thrown. 
            If ExceptionsOnError is set to false then the error message from the exception is output to standard output</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfParser.OnWarning(System.String)">
            <summary>
            Called by the parser when a warning is generated.
            </summary>
            <param name="msg">The message associated with the warning</param>
            <exception cref="T:Drive.Rdf.InvalidRdfException">ExceptionsOnWarnings is set to true</exception>
        </member>
        <member name="M:Drive.Rdf.RdfParser.OnWarning(System.Exception)">
            <summary>
            Called by the parser when a warning is generated. 
            </summary>
            <param name="e">The exception to throw if ExceptionsOnWarnings is true</param>
            <remarks>If ExceptionsOnWarnings is set to true then the specified exception is thrown.
            If ExceptionsOnWarnings is set to false then the error message from the exception is output to standard output</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfParser.AddNodeToGraph(System.String)">
            <summary>
            Adds an RdfNode object with the specified Uri to the Graph.
            </summary>
            <param name="nodeUri">The Uri of the node to add</param>
            <returns>The newly added RdfNode object</returns>
            <remarks>If the node with the specified Uri does not already exist it is created and added.
            If the node exists in the graph then a reference to the existing node is returned.
            If the specified Uri is null or blank the debug version asserts.
            If the specified Uri is not a well formed Uri then the debug version asserts.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfParser.AddEdgeToGraph(Drive.Rdf.IRdfEdge)">
            <summary>
            Adds an edge to the Graph
            </summary>
            <param name="edge">An object that implements the IRdfEdge interface and represents the new edge to add</param>
        </member>
        <member name="M:Drive.Rdf.RdfParser.AddLiteralToGraph(System.String,System.String,System.String)">
            <summary>
            Adds an  RdfLiteral object to the RDF Graph     
            </summary>
            <param name="literalValue">The literal value of the node to add</param>
            <param name="langID">A string containing the language identifier for this Literal</param>
            <param name="datatypeUri">A string containing the URI that specifies the datatype for thsi literal.</param>
            <exception cref="T:System.UriFormatException">The specified datatypeUri  is not a null reference and is not a well formed URI</exception>
            <returns>The newly added RdfLiteral object</returns>
            <remarks>If a literal with the specified value, langID and datatype exists then a reference to the existing literal is returned. 
            If the Literal is not found a new one is created. Any of the supplied parameters, except literalValue, can be null.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfParser.IsValidUri(System.String)">
            <summary>
            Determines whether the specified URI string is a well formed URI
            </summary>
            <param name="uriString">A string</param>
            <returns>True if the specified string is a well formed URI.</returns>
        </member>
        <member name="P:Drive.Rdf.RdfParser.Warnings">
            <summary>
            List of warning messages generated while parsing the RDF/XML
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfParser.Errors">
            <summary>
            List of error messages generated while parsing the RDF/XML
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfParser.StopOnErrors">
            <summary>
            Gets or sets a value that indicates whether the parser should throw an exception and stop when it encounters an error
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfParser.StopOnWarnings">
            <summary>
            Gets or sets a value that indicates whether the parser should throw an exception and stop when it generates a warning
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfN3Parser._nTriples">
            <summary>
            A collection of N-Triples generated as a result of the last parse  operation
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfN3Parser.#ctor">
            <summary>
            Initialzes a new instance of an RDF N-Triple Parser
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfN3Parser.ParseRdf(System.Uri)">
            <summary>
            Parses the RDF at the given uri
            </summary>
            <param name="uri">The source uri for the data to parse</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfN3Parser.ParseRdf(System.Uri,Drive.Rdf.IRdfGraph)">
            <summary>
            Parses the RDF at the given uri into an existing graph
            </summary>
            <param name="uri">The source uri for the data to parse</param>
            M<param name="graph">Th graph to use as the destination of the data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfN3Parser.ParseRdf(System.String)">
            <summary>
            Parses the RDF at the given uri
            </summary>
            <param name="uri">The source uri for the data to parse</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfN3Parser.ParseRdf(System.String,Drive.Rdf.IRdfGraph)">
            <summary>
            Parses the RDF at the given uri into an existing graph
            </summary>
            <param name="uri">The source uri for the data to parse</param>
            <param name="graph">Th graph to use as the destination of the data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfN3Parser.ParseRdf(System.IO.Stream)">
            <summary>
            Parses the RDF from the given stream
            </summary>
            <param name="inStream">The source stream for the data to parse</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfN3Parser.ParseRdf(System.IO.Stream,Drive.Rdf.IRdfGraph)">
            <summary>
            Parses the RDF from the given stream into an existing graph
            </summary>
            <param name="inStream">The source stream for the data to parse</param>
            <param name="graph">Th graph to use as the destination of the data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="P:Drive.Rdf.RdfN3Parser.NTriples">
            <summary>
            Gets a collection of N-Triples generated as a result of the last parse  operation
            </summary>
        </member>
        <member name="T:Drive.Rdf.RdfNamespaceCollection">
            <summary>
            Represents a collection of Namespaces
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfNamespaceCollection.RdfNamespace">
            <summary>
            The RDF Namespace.
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfNamespaceCollection.XmlNamespace">
            <summary>
            The XML namespace.
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfNamespaceCollection._nameSpaces">
            <summary>
            The collection of namespaces
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfNamespaceCollection.Remove(System.String)">
            <summary>
            Removes a namespace from the namespace collection
            </summary>
            <param name="name">The name of the namespace to remove</param>
            <exception cref="T:System.ArgumentNullException">The specified name is a null reference.</exception>
            <remarks>Removes the name from the collection.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfNamespaceCollection.RemoveAll">
            <summary>
            Removes all the namespaces from this collection
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfNamespaceCollection.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through this collection.
            </summary>
            <returns>An object that implements that implements the <see cref="T:System.Collections.IEnumerator"/> interface.</returns>
        </member>
        <member name="M:Drive.Rdf.RdfNamespaceCollection.#ctor">
            <summary>
            Initializes a new instance of the RdfNamespaceCollection class.
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfNamespaceCollection.Item(System.String)">
            <summary>
            Gets or sets the Namespace with the specified name
            </summary>
            <exception cref="T:System.ArgumentException">Attempt to set a namespace with an empty name.</exception>
            <exception cref="T:System.ArgumentNullException">Attempt to store a null namespace.</exception>
            <exception cref="T:System.ArgumentNullException">Attempt to set a namespace with a null name.</exception>
            <remarks>The name of the namspace is a string consisting of the namespace prefix prefaced with xmlns:. 
            The one exception is xml:base where the value of the base URI of the RDF document is stored under the
            name xml:base.</remarks>
        </member>
        <member name="P:Drive.Rdf.RdfNamespaceCollection.Count">
            <summary>
            Gets the total number of namespaces in this collection.
            </summary>
        </member>
        <member name="T:Drive.Rdf.RdfNodeCollection">
            <summary>
            Represents a collection of RDF Nodes
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfNodeCollection._nodes">
            <summary>
            The collection of RdfNode objects
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfNodeCollection.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through this collection.
            </summary>
            <returns>An object that implements that implements the <see cref="T:System.Collections.IEnumerator"/> interface.</returns>
        </member>
        <member name="M:Drive.Rdf.RdfNodeCollection.Add(System.String,Drive.Rdf.IRdfNode)">
            <summary>
            Adds a node to the collection.
            </summary>
            <param name="nodeID">The ID of the node to add.</param>
            <param name="newNode">An object that implements the IRdfNode interface. This is a reference to the node to add.</param>
            <exception cref="T:System.ArgumentException">A node with the specified ID already exists in the collection.</exception>
            <exception cref="T:System.ArgumentNullException">The specified ID is a null reference.</exception>
        </member>
        <member name="M:Drive.Rdf.RdfNodeCollection.Add(Drive.Rdf.IRdfNode)">
            <summary>
            Adds a node to the collection.
            </summary>
            <param name="newNode">An object that implements the IRdfNode interface. This is a reference to the node to add.</param>
            <exception cref="T:System.ArgumentException">A node with the same ID already exists in the collection.</exception>
            <exception cref="T:System.ArgumentNullException">The ID of the specified node is a null Reference.</exception>
        </member>
        <member name="M:Drive.Rdf.RdfNodeCollection.Remove(Drive.Rdf.IRdfNode)">
            <summary>
            Removes a node from this collection.
            </summary>
            <param name="node">An object that implements the IRdfNode interface. This is the node to remove.</param>
            <returns>True if a node with the same ID was found and removed.</returns>
            <exception cref="T:System.ArgumentException">node is a null reference.</exception>
            <remarks>This method removes the node with the same ID as the specified node.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfNodeCollection.RemoveAll">
            <summary>
            Removes all the nodes from this collection
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfNodeCollection.Contains(Drive.Rdf.IRdfNode)">
            <summary>
            Determines whether the specified node is a member of this collection.
            </summary>
            <param name="node">An object that implements the IRdfNode interface.</param>
            <returns>True if a node with the same ID was found in the collection.</returns>
        </member>
        <member name="M:Drive.Rdf.RdfNodeCollection.#ctor">
            <summary>
            Initializes a new instance of the RdfNodeCollection class.
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfNodeCollection.Item(System.String)">
            <summary>
            Gets or sets the Node with the specified ID
            </summary>
            <exception cref="T:System.ArgumentNullException">nodeID is a null reference.</exception>
        </member>
        <member name="P:Drive.Rdf.RdfNodeCollection.Count">
            <summary>
            Gets the total number of nodes in this collection.
            </summary>
        </member>
        <member name="T:Drive.Rdf.RdfNTriple">
            <summary>
            Summary description for RdfNTriple.
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfNTriple._subject">
            <summary>
            The subject of this Triple
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfNTriple._predicate">
            <summary>
            The predicate of this Triple
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfNTriple._object">
            <summary>
            The object of this Triple
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfNTriple.#ctor">
            <summary>
            Initializes a new instance of the RdfNtriple class
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfNTriple.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the RdfNtriple class
            </summary>
            <param name="subject">The subject of the new triple</param>
            <param name="predicate">The predicate of the new triple</param>
            <param name="obj">The object of the new triple</param>
        </member>
        <member name="P:Drive.Rdf.RdfNTriple.Subject">
            <summary>
            Gets or Sets the subject of this Triple
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfNTriple.Predicate">
            <summary>
            Gets or Sets the predicate of this Triple
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfNTriple.Object">
            <summary>
            Gets or Sets the object of this Triple
            </summary>
        </member>
        <member name="T:Drive.Rdf.RdfNTripleCollection">
            <summary>
            Summary description for RdfN3Collection.
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfNTripleCollection._triples">
            <summary>
            A list of triples in this collection
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfNTripleCollection.Add(Drive.Rdf.IRdfNTriple)">
            <summary>
            Adds a triple to this collection
            </summary>
            <param name="triple">The triple to add. This is an object that implements the IRdfNTriple interface</param>
            <exception cref="T:System.ArgumentNullException">The specified triple is a null reference.</exception>
        </member>
        <member name="M:Drive.Rdf.RdfNTripleCollection.Contains(Drive.Rdf.IRdfNTriple)">
            <summary>
            Determines whether this collection contains the specified object
            </summary>
            <param name="triple">An object that implements the IRdfNTriple interface</param>
            <returns>True if the specified object is present in this collection</returns>
            <remarks>This method calls ArrayList.Contains to determine whether the triple exists and does not 
            check for the presence of triples with the same contents as the specified triple.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfNTripleCollection.Remove(Drive.Rdf.IRdfNTriple)">
            <summary>
            Removes the specified N-Triple object from the collection if it exists
            </summary>
            <param name="triple">An object that implements the IRdfNTriple interface</param>
            <remarks>This method calls ArrayList.Remove to remove the triple if it exists and does not 
            remove triples with the same contents as the specified triple.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfNTripleCollection.RemoveAll">
            <summary>
            Removes all the N-Triples from this collection
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfNTripleCollection.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through this collection
            </summary>
            <returns>An object that implements the IEnumerator interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfNTripleCollection.#ctor">
            <summary>
            Initializes a new instance of the RdfNTripleCollection class.
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfNTripleCollection.Count">
            <summary>
            Gets a count of the total number of triples in this collection
            </summary>
        </member>
        <member name="P:Drive.Rdf.RdfNTripleCollection.Item(System.Int32)">
            <summary>
            Gets or sets the triple at the specified index
            </summary>
        </member>
        <member name="T:Drive.Rdf.RdfParserFactory">
            <summary>
            Represents a ParserFactory that creates and returns Drive.Rdf objects
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfParserFactory.#ctor">
            <summary>
            Initializes a new instance of the ParserFactory
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfParserFactory.GetRdfXmlParser">
            <summary>
            Creates and returns an RDF/XML Parser
            </summary>
            <returns>An object that implements the IRdfParser interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfParserFactory.GetRdfN3Parser">
            <summary>
            Creates and returns an RDF/XML Parser
            </summary>
            <returns>An object that implements the IRdfParser interface</returns>
        </member>
        <member name="T:Drive.Rdf.RdfSeq">
            <summary>
            Represents an RDF container of type rdf:Seq.
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfSeq.#ctor">
            <summary>
            Initializes a new instance of the RdfSeq class
            </summary>
            <remarks>This constructor creates a new RdfNode with Uri rdf:Seq and sets it as the child node of an edge with URI rdf:type</remarks>	
        </member>
        <member name="M:Drive.Rdf.RdfSeq.#ctor(System.String,Drive.Rdf.RdfNode)">
            <summary>
            Initializes a new instance of the RdfSeq class with the given Uri and TypeNode
            </summary>
            <param name="nodeUri">A string representing the Uri of this Container</param>
            <param name="typeNode">The RdfNode object to attach to the edge specifying the type. This is usually a node with ID rdf:Seq.</param>
            <exception cref="T:System.ArgumentNullException">typeNode is a null reference</exception>
        </member>
        <member name="M:Drive.Rdf.RdfSeq.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RdfSeq class with the given Uri
            </summary>
            <param name="nodeUri">A string representing the URI of this Container</param>
            <remarks>This constructor creates a new RdfNode with URI rdf:Seq and sets it as the child node of an edge with URI rdf:type</remarks>	
        </member>
        <member name="T:Drive.Rdf.RdfStatement">
            <summary>
            Represents a reified statement
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfStatement._typeEdge">
            <summary>
            The edge that specifies the type of this node. 
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfStatement._rdfSubjectEdge">
            <summary>
            The edge that points to the Subject of this statement.
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfStatement._rdfPredicateEdge">
            <summary>
            The edge that points to the Predicate of this statement.
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfStatement._rdfObjectEdge">
            <summary>
            The edge that points to the object of this statement.
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfStatement.#ctor">
            <summary>
            Initializes a new instance of the RdfStatement class.
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfStatement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RdfStatement class with the specified URI.
            </summary>
            <param name="nodeUri">A string that contains the URI of this statement.</param>
            <exception cref="T:System.UriFormatException">nodeUri is not a well formed URI.</exception>
        </member>
        <member name="M:Drive.Rdf.RdfStatement.#ctor(Drive.Rdf.RdfNode)">
            <summary>
            Initializes a new instance of the RdfStatement class with the node that specifies the Type.
            </summary>
            <param name="type">The node that specifies the type of this node.</param>
            <exception cref="T:System.ArgumentNullException">type is a null reference.</exception>
        </member>
        <member name="M:Drive.Rdf.RdfStatement.#ctor(System.String,Drive.Rdf.RdfNode)">
            <summary>
            Initializes a new instance of the RdfStatement class.
            </summary>
            <param name="nodeUri">A string that contains the URI of this statement.</param>
            <param name="type">The node that specifies the type of this node.</param>
            <exception cref="T:System.ArgumentNullException">type is a null reference.</exception>
            <exception cref="T:System.UriFormatException">nodeUri is not a well formed URI.</exception>
        </member>
        <member name="P:Drive.Rdf.RdfStatement.Type">
            <summary>
            Gets or sets the Node that specifies the type of this node
            </summary>
            <exception cref="T:System.ArgumentNullException">Attempt to set this property to a null reference.</exception>
        </member>
        <member name="P:Drive.Rdf.RdfStatement.RdfSubject">
            <summary>
            Gets or sets the Subject of this statement.
            </summary>
            <exception cref="T:System.ArgumentNullException">Attempt to set this property to a null reference.</exception>
        </member>
        <member name="P:Drive.Rdf.RdfStatement.RdfPredicate">
            <summary>
            Gets or sets the Predicate of this statement.
            </summary>
            <exception cref="T:System.ArgumentNullException">Attempt to set this property to a null reference.</exception>
        </member>
        <member name="P:Drive.Rdf.RdfStatement.RdfObject">
            <summary>
            Gets or sets the Object of this statement
            </summary>
            <exception cref="T:System.ArgumentNullException">Attempt to set this property to a null reference.</exception>
        </member>
        <member name="T:Drive.Rdf.RdfXmlParser">
            <summary>
            The primary RDF Parser.
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfXmlParser._nonSyntacticRdfElements">
            <summary>
            A Collection of non syntactic elements in the RDF syntax
            </summary>
            <remarks>The members of this collection are rdf:Alt rdf:Seq rdf:Bag rdf:rest rdf:first rdf:predicate rdf:object rdf:List rdf:subject rdf:Statement rdf:Property rdf:datatype rdf:value</remarks>
        </member>
        <member name="F:Drive.Rdf.RdfXmlParser._syntacticRdfElements">
            <summary>
            A Collection of syntactic elements in the RDF syntax
            </summary>
            <remarks>The members of this collection are rdf:RDF, rdf:ID, rdf:about, rdf:resource, rdf:parseType, rdf:li, rdf:Description, rdf:nodeID</remarks>
        </member>
        <member name="F:Drive.Rdf.RdfXmlParser._rdfXmlProperties">
            <summary>
            A Collection of all RDF and XML properties
            </summary>
            <remarks>The members of this collection are rdf:about, rdf:resource, rdf:parseType, rdf:ID, rdf:nodeID, rdf:datatype, rdf:value, xml:lang, xml:base</remarks>
        </member>
        <member name="F:Drive.Rdf.RdfXmlParser._rdfLiTable">
            <summary>
            A table that that maps RDF Nodes to the hignest ordinal used for rdf:li properties
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfXmlParser._declID">
            <summary>
            A Hashtable that stores declared rdf:ID values for quick lookup of duplicates
            </summary>
        </member>
        <member name="F:Drive.Rdf.RdfXmlParser._newID">
            <summary>
            Variable used to generate new IDs for RDF Nodes
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.#ctor">
            <summary>
            Initializes an instance of the RdfParser class
            </summary>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.IO.TextReader,Drive.Rdf.IRdfGraph,System.String)">
            <summary>
            Parses the RDF from the given TextReader, into an existing graph using the given xml:base uri
            </summary>
            <param name="txtReader">The TextReader to use as the source of the XML data</param>
            <param name="graph">An object that implements the IRdfGraph interface</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data or the graph</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.IO.TextReader,System.String)">
            <summary>
            Parses the RDF from the given TextReader, using the given xml:base uri
            </summary>
            <param name="txtReader">The TextReader to use as the source of the XML data</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.IO.TextReader,Drive.Rdf.IRdfGraph)">
            <summary>
            Parses the RDF from the given TextReader, into an existing graph
            </summary>
            <param name="txtReader">The TextReader to use as the source of the XML data</param>
            <param name="graph">An object that implements the IRdfGraph interface</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.IO.TextReader)">
            <summary>
            When implemented by a class, parses the RDF from the given TextReader
            </summary>
            <param name="txtReader">The TextReader to use as the source of the XML data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.Xml.XmlReader,Drive.Rdf.IRdfGraph,System.String)">
            <summary>
            Parses the RDF from the given XmlReader, into an existing graph using the given xml:base uri
            </summary>
            <param name="reader">The XmlReader to use as the source of the XML data</param>
            <param name="graph">An object that implements the IRdfGraph interface</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data or the graph</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.Xml.XmlReader,System.String)">
            <summary>
            Parses the RDF from the given XmlReader, using the given xml:base uri
            </summary>
            <param name="reader">The XmlReader to use as the source of the XML data</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.Xml.XmlReader,Drive.Rdf.IRdfGraph)">
            <summary>
            Parses the RDF from the given XmlReader, into an existing graph
            </summary>
            <param name="reader">The XmlReader to use as the source of the XML data</param>
            <param name="graph">An object that implements the IRdfGraph interface</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.Xml.XmlReader)">
            <summary>
            Parses the RDF from the given XmlReader
            </summary>
            <param name="reader">The XmlReader to use as the source of the XML data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.Xml.XmlDocument,Drive.Rdf.IRdfGraph,System.String)">
            <summary>
            Parses the RDF from the given XmlDocument, into an existing graph using the given xml:base uri
            </summary>
            <param name="doc">The XmlDocument to use as the source of the XML data</param>
            <param name="graph">An object that implements the IRdfGraph interface</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data or the graph</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.Xml.XmlDocument,System.String)">
            <summary>
            Parses the RDF from the given XmlDocument, using the given xml:base uri
            </summary>
            <param name="doc">The XmlDocument to use as the source of the XML data</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.Xml.XmlDocument,Drive.Rdf.IRdfGraph)">
            <summary>
            Parses the RDF from the given XmlDocument, into an existing graph
            </summary>
            <param name="doc">The XmlDocument to use as the source of the XML data</param>
            <param name="graph">An object that implements the IRdfGraph interface</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.Xml.XmlDocument)">
            <summary>
            Parses the RDF from the given XmlDocument
            </summary>
            <param name="doc">The XmlDocument to use as the source of the XML data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.Uri,Drive.Rdf.IRdfGraph)">
            <summary>
            Parses the RDF at the given URI, into an existing graph
            </summary>
            <param name="uri">The Uri of the document to parse</param>
            <param name="graph">An object that implements the IRdfGraph interface that will be used as the destination graph</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.Uri)">
            <summary>
            Parses the RDF at the given URI
            </summary>
            <param name="uri">The Uri of the document to parse</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.IO.Stream,Drive.Rdf.IRdfGraph,System.String)">
            <summary>
            Parses the RDF from the given stream, into an existing graph using the given xml:base uri
            </summary>
            <param name="inStream">The Stream to use as the source of the XML data</param>
            <param name="graph">An object that implements the IRdfGraph interface</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data or the graph</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.IO.Stream,System.String)">
            <summary>
            Parses the RDF from the given stream, using the given xml:base uri
            </summary>
            <param name="inStream">The Stream to use as the source of the XML data</param>
            <param name="xmlbaseUri">The xml:base Uri to use incase one is not found in the XML data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.IO.Stream,Drive.Rdf.IRdfGraph)">
            <summary>
            Parses the RDF from a stream into an existing Graph
            </summary>
            <param name="inStream">The input stream for data</param>
            <param name="graph">An object that implements the IRdfGraph interface that will be used as the destination graph</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.IO.Stream)">
            <summary>
            Parses the RDF from a stream
            </summary>
            <param name="inStream">The input stream for data</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.String,Drive.Rdf.IRdfGraph)">
            <summary>
            Parses the RDF at the given URI, into an existing graph
            </summary>
            <param name="uri">The Uri of the document to parse</param>
            <param name="graph">An object that implements the IRdfGraph interface that will be used as the destination graph</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdf(System.String)">
            <summary>
            Builds an RdfGraph from an RDF/XML serialization
            </summary>
            <param name="uri">The URI of the RDF document to parse</param>
            <returns>An object that implements the IRdfGraph interface</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.GetXmlBase(System.Xml.XmlNode)">
            <summary>
            Gets the value of the xml:base attribute from the XmlNode if one exists
            </summary>
            <param name="node">An Xml Node</param>
            <returns>A string containing the xml:base uri. Returns null if the xml:base attribute is not found</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.MoveEdges(Drive.Rdf.RdfNode,Drive.Rdf.RdfNode)">
            <summary>
            Moves all the edges associated with the source node to the destination node
            </summary>
            <param name="srcNode">The node from which the edges are to be moved.</param>
            <param name="destNode">The node to which the edges are to be moved</param>
            <remarks>This method moves all the edges from the src node to the dest node. 
            The src node is not removed from the graph. </remarks>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.AddAltToGraph(System.String)">
            <summary>
            Adds an RDF Container of type rdf:Alt to the graph</summary>
            <param name="nodeUri">The Uri of the container.</param>
            <returns>Returns a reference to the newly added container.</returns>
            <exception cref="T:System.UriFormatException">The specified nodeUri  is not a well formed Uri.</exception>
            <remarks>If a node with the specified Uri exists then it is converted to an RdfAlt (if required) and returned. 
            If the container does not exist a new one is created</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.AddStatementToGraph(System.String)">
            <summary>
            Adds an RdfStatement to the RDF graph
            </summary>
            <param name="statementUri">The Uri of the statement.</param>
            <exception cref="T:System.UriFormatException">The specified statementUri is not a well formed Uri.</exception>
            <returns>A reference to the newly added statement</returns>
            <remarks>If a node with the specified Uri exists then it is converted to an RdfStatement (if required) and returned. 
            If the statement does not exist a new one is created</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.AddBagToGraph(System.String)">
            <summary>
            Adds an RDF Container of type rdf:Bag to the graph</summary>
            <param name="nodeUri">The Uri of the container.</param>
            <returns>Returns a reference to the newly added container.</returns>
            <exception cref="T:System.UriFormatException">The specified nodeUri is not a well formed Uri.</exception>
            <remarks>If a node with the specified Uri exists then it is converted to an RdfBag (if required) and returned. 
            If the container does not exist a new one is created</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.AddSeqToGraph(System.String)">
            <summary>
            Adds an RDF Container of type rdf:Seq to the graph</summary>
            <param name="nodeUri">The Uri of the container.</param>
            <returns>Returns a reference to the newly added container.</returns>
            <exception cref="T:System.UriFormatException">The specified nodeUri  is not a well formed Uri.</exception>
            <remarks>If a node with the specified Uri exists then it is converted to an RdfSeq (if required) and returned. 
            If the container does not exist a new one is created</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.CreateTypedNode(System.Xml.XmlNode,System.String)">
            <summary>
            Creates a typed node with the specified nodeUri
            </summary>
            <param name="node">The XmlNode element specifying the type of the RdfNode</param>
            <param name="nodeUri">The Uri of the new node. It may be null, blank or a relative Uri.</param>
            <returns>A reference to the newly created TypedNode</returns>
            <exception cref="T:System.ArgumentNullException">node  is null a null reference</exception>
            <remarks>The new node created has a child edge with ID rdf:type from this node pointing 
            to a node with URI specified by the name of the given XmlNode element.
            If the specified URI is null or empty a new blank node Uri is created. 
            If the Uri is a relative URI it is converted to an absolute URI by prefixing it with the value given by xml:base.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ProcessNode(System.Xml.XmlNode,System.Boolean,System.Object)">
            <summary>
            Processes each node in the XML document. 
            </summary>
            <param name="node">The XmlNode to process.</param>
            <param name="bIsRdfNode">Indicates if we are about to process a node or an edge in the RDF Graph</param>
            <param name="parent">The parent of the current node.</param>
            <returns>Returns a reference to the new node or edge created</returns>
            <exception cref="T:Drive.Rdf.InvalidRdfException">The RDF Syntax encountered is invalid</exception>
            <remarks>This method is called recursively to build the RDF graph.
            The parent is an object of type RdfNode or RdfEdge.
            An RdfParseException is thrown to indicate a parser error.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.GetDatatypeUri(System.Xml.XmlNode)">
            <summary>
            Gets the rdf:datatype Uri from the specified XML element
            </summary>
            <param name="node">The XmlNode from which to extract the rdf:datatype attribute</param>
            <returns>A string representing the datatype Uri. A null reference is returned if the rdf:datatype attribute is not found.</returns>
            <remarks>This method looks for the rdf:datatype attribute on the specified XML element and returns the value.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.IsRdfXmlProperty(System.Xml.XmlNode)">
            <summary>
            Determines whether the XML Node is a property that is part of the RDF or XML syntax
            </summary>
            <param name="prop">An XmlNode</param>
            <returns>True if the property is part of the RDF or XML syntax or if the property is reserved for use by xml</returns>
            <remarks>This method returns true is the property localname or prefix begins with xml (regardless of whether xml is in uppercase, lowercase or
            any combination thereof. </remarks>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.IsNonSyntacticRdfElement(System.Xml.XmlNode)">
            <summary>
            Determines whether the XML Node is a non syntactix RDF element
            </summary>
            <param name="prop">An XmlNode</param>
            <returns>True if the element is a non syntactic RDF element.</returns>
            <remarks>The non syntactic RDF elements are 
            rdf:Alt rdf:Seq rdf:Bag rdf:rest rdf:first rdf:predicate rdf:object rdf:List rdf:subject rdf:Statement rdf:Property</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.IsSyntacticRdfElement(System.Xml.XmlNode)">
            <summary>
            Determines whether the XML Node is a syntactix RDF element
            </summary>
            <param name="node">An XmlNode</param>
            <returns>True if the element is a non syntactic RDF element.</returns>
            <remarks>The syntactic RDF elements are rdf:RDF, rdf:ID, rdf:about, rdf:resource, rdf:parseType, rdf:li</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.IsUnqualifiedRdfProperty(System.Xml.XmlNode)">
            <summary>
            Determines whether the XML Node is an unqualified RDF property
            </summary>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseReificationAttributes(System.Xml.XmlNode,Drive.Rdf.RdfEdge)">
            <summary>
            Parses the reification attribute rdf:ID as it appears on an edge in the RDF graph.
            </summary>
            <param name="node">The XmlNode containing the attributes</param>
            <param name="rEdge">The predicate if the rdf:ID attribute is found and the parent of the subject node if the rdf:bagID attribut is found.</param>
            <remarks>Reifies the triple with predicate rEdge if the attribute rdf:ID is found and 
            creates a bag of reified statements if the rdf:bagID attribute is found</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseNodeAttributes(System.Xml.XmlNode,Drive.Rdf.RdfNode)">
            <summary>
            Parses the rdf:value, rdf:type attributes as well as any attributes not part of the RDF or XML namespace
            </summary>
            <param name="node">The XmlNode on which the attributes appear</param>
            <param name="rNode">The RdfNode to which the attributes must be applied</param>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseEdgeAttributes(System.Xml.XmlNode,Drive.Rdf.RdfEdge)">
            <summary>
            Process the rdf:value and rdf:_n attributes and any attributes not in the rdf or xml namespace
            </summary>
            <param name="node">The XmlNode that attributes appear on</param>
            <param name="rEdge">The RDF edge that the attributes must be applied to.</param>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdfAttributes(System.Xml.XmlNode)">
            <summary>
            Parses the RDF attributes rdf:about, rdf:ID and rdf:nodeID
            </summary>
            <param name="node">The XmlNode on which the attributes appear</param>
            <returns>A Uri string with the ID specified by the attributes. Null if none of the three attributes are found</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdfAttributes(System.Xml.XmlNode,Drive.Rdf.RdfEdge)">
            <summary>
            Parses the RDF Attributes rdf:resource, rdf:nodeID, rdf:parseType, and xml:lang as they appear on an edge
            </summary>
            <param name="node">The XmlNode on which the attributes appear</param>
            <param name="rEdge">The RdfEdge to which the attributes must be applied</param>
            <returns>True if the children of the specified XML Node should be parsed</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.GetBlankNodeUri(System.String)">
            <summary>
            Gets a URI string for a new blank node
            </summary>
            <param name="baseID">The base ID from which the Uri must be created.</param>
            <returns>A string containing a well formed URI</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ProcessRdfNodeID(Drive.Rdf.RdfEdge,System.String)">
            <summary>
            Process the rdf:nodeID attribute found on the RDF edge
            </summary>
            <param name="rEdge">The edge to which the rdf:nodeID attribute must be applied</param>
            <param name="baseNodeID">The ID specified by the rdf:nodeID attribute</param>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ProcessRdfResource(System.Xml.XmlNode,Drive.Rdf.RdfEdge,System.String)">
            <summary>
            Create a node from the rdf:resource attribute and attach it to a given edge as a child
            </summary>
            <param name="node">The XmlNode that contains the rdf:resource attribute.</param>
            <param name="rEdge">The edge to which the new childnode must be added.</param>
            <param name="resourceUri">The URI specified by the rdf:resource attribute.</param>
            <remarks>If the specified Uri is null or empty a new blank node URI is created. 
            If it is a relative URI then it is converted to an absolute URI by prefixing it with the value given by xml:base</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.QualifyResource(System.String,System.String)">
            <summary>
            Converts the value given by rdf:about into a fully qualified Uri
            </summary>
            <param name="val">The value specified by the rdf:about attribute</param>
            <param name="xmlBaseUriString">An string specifying an xml:base Uri to use. This parameter can be null.</param>
            <returns>A well formed Uri string</returns>
            <remarks>This method should only be used to convert rdf:about and rdf:resource values into fully qualified URIs. 
            If the xmlBaseUriString is null or an empty string then the global value for xml:base will be used.</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.GetAbsolutePath(System.String,System.String)">
            <summary>
            Returns an absolute path by combining the initial path and a relative path
            </summary>
            <param name="initPath">A string representing the initial path</param>
            <param name="relPath">A string representing the relative path</param>
            <returns>A string representing the absolute path formed by the combination of the initial and relative paths.</returns>
            <remarks>The init path should be terminated at both ends by / or \ characters. This method concatenates the initial 
            and relative paths and returns an absolute path with proper handling of ../ prefixes on the relative path</remarks>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.PrependXmlBase(System.String,System.String)">
            <summary>
            Makes a URI string from the specified ID by prepending the uri specified by xml:base to it
            </summary>
            <param name="id">The ID to convert to a URI string</param>
            <param name="xmlBaseUri">A string containing an xml:base Uri to use rather than the global xml:base Uri.</param>
            <remarks>This method checks the given xmlBaseUri string for the value of the xml:base URI to prepend to the ID.
            If it is null or an empty string then the global xml:base is used.</remarks>
            <returns>A string containing a well formed URI.</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ProcessRdfParseType(System.Xml.XmlNode,Drive.Rdf.RdfEdge,System.String)">
            <summary>
            Processes the rdf:parseType attribute
            </summary>
            <param name="node">The XML Node on which the attribute appears</param>
            <param name="rEdge">The edge to which the attribute must be applied</param>
            <param name="parseType">The parse type as specified by the value of the attribute</param>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.AddTypeStatement(Drive.Rdf.RdfNode,System.String)">
            <summary>
            Adds an edge and a child node to the specified parent node 
            </summary>
            <param name="parentNode">The node to which the edge should be added</param>
            <param name="rdfType">The type of the node. This param is prefaced with the rdf Uri to convert it to an absolute Uri</param>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.BuildCollection(System.Xml.XmlNode)">
            <summary>
            Builds an RDF Collection.
            </summary>
            <param name="propertyNode">The XML Node containing the children that will form the members of this list</param>
            <returns>The head of the collection. This is the first member of the list or a nil node if the list is empty</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.IsXmlName(System.String)">
            <summary>
            Determines whether the specified name is an XML name
            </summary>
            <param name="name">A Name</param>
            <returns>True if the name is an XML name</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.CreateReifiedStatement(System.String,Drive.Rdf.RdfNode,Drive.Rdf.RdfNode,Drive.Rdf.RdfNode)">
            <summary>
            Creates a Reified RDF statement
            </summary>
            <param name="statementID">The ID of the statement</param>
            <param name="subject">The subject of the statement</param>
            <param name="predicate">The predicate of Statement</param>
            <param name="obj">The Object of the statement</param>
            <returns>A reference to the newly created statement</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdfSyntax(System.Xml.XmlNode,Drive.Rdf.RdfEdge,Drive.Rdf.RdfNode)">
            <summary>
            Parses the RDF syntax [rdf:li, rdf:_n, rdf:type, rdf:value] on an edge.
            </summary>
            <param name="node">The XML Node representing the RDF edge</param>
            <param name="rEdge">The edge</param>
            <param name="parentNode">The parent RDF node</param>
            <returns>True if the edge was given an ID and attached to the parent node</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.IsListMember(System.String)">
            <summary>
            Determines whether the edgename is a list member with format rdf:_n
            </summary>
            <param name="edgeName">The name of the edge</param>
            <returns>True if the name represents a list member</returns>
        </member>
        <member name="M:Drive.Rdf.RdfXmlParser.ParseRdfSyntax(System.Xml.XmlNode,System.String)">
            <summary>
            Process the RDF Syntax [rdf:Description, rdf:Bag, rdf:Seq, rdf:Alt] on an RDF Node
            </summary>
            <param name="node">The XmlNode representing the RDF Node</param>
            <param name="nodeID">The ID to be assigned to the RDF node</param>
            <returns>The newly created RDF node or null if there are no RDF elements on this XmlNode</returns>
        </member>
        <member name="T:Drive.Rdf.ReadOnlyRdfEdgeList">
            <summary>
            
            </summary>
        </member>
        <member name="T:Drive.Rdf.Util">
            <summary>
            Represents a class of utility methods
            </summary>
        </member>
        <member name="M:Drive.Rdf.Util.PrintNodes(Drive.Rdf.IRdfGraph)">
            <summary>
            Prints all the nodes in the specified RDF Graph to the console
            </summary>
            <param name="graph">An object that impplements the IRdfGraph interface</param>
        </member>
        <member name="M:Drive.Rdf.Util.PrintEdges(Drive.Rdf.IRdfGraph)">
            <summary>
            Prints all the edges in the specified RDF Graph to the console
            </summary>
            <param name="graph">An object that impplements the IRdfGraph interface</param>
        </member>
        <member name="M:Drive.Rdf.Util.PrintLiterals(Drive.Rdf.IRdfGraph)">
            <summary>
            Prints all the Literals in the specified RDF Graph to the console
            </summary>
            <param name="graph">An object that implements the IRdfGraph interface</param>
        </member>
        <member name="M:Drive.Rdf.Util.PrintNTriples(Drive.Rdf.IRdfGraph)">
            <summary>
            Prints all the N-Triples in the specified RDF Graph to the console
            </summary>
            <param name="graph">An object that implements the IRdfGraph interface</param>
        </member>
        <member name="M:Drive.Rdf.Util.Print(Drive.Rdf.IRdfNodeCollection)">
            <summary>
            Prints all the nodes in the specified Node Collection to the console
            </summary>
            <param name="nodeCollection">An object that implements the IRdfNodeCollection interface</param>
        </member>
        <member name="M:Drive.Rdf.Util.Print(Drive.Rdf.IRdfEdgeCollection)">
            <summary>
            Prints all the edges in the specified Edge Collection to the console
            </summary>
            <param name="edgeCollection">An object that implements the IRdfEdgeCollection interface</param>
        </member>
        <member name="M:Drive.Rdf.Util.PrintNTriple(Drive.Rdf.IRdfNode)">
            <summary>
            Prints the specified RDF Node to the console as an N-Triple
            </summary>
            <param name="node">An object that implements the IRdfNode interface</param>
        </member>
        <member name="M:Drive.Rdf.Util.PrintNTriple(Drive.Rdf.IRdfEdge)">
            <summary>
            Prints the specified RDF Edge to the console as an N-Triple
            </summary>
            <param name="edge">An object that implements thet IRdfEdge interface</param>
        </member>
        <member name="M:Drive.Rdf.Util.ToCharmod(System.String)">
            <summary>
            Returns the Charmod escaped representation of this string
            </summary>
            <param name="str">A string</param>
            <returns>A string with the Charmod escaped representation</returns>
        </member>
    </members>
</doc>
